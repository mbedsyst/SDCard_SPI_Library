
SDCard_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001518  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  080016b8  080016b8  000026b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001934  08001934  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001934  08001934  00002934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800193c  0800193c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800193c  0800193c  0000293c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001940  08001940  00002940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001944  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080019a0  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080019a0  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000106b  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000662  00000000  00000000  000040f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00004760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000124  00000000  00000000  00004910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002358  00000000  00000000  00004a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002768  00000000  00000000  00006d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005592e  00000000  00000000  000094f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005ee22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cd0  00000000  00000000  0005ee68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0005fb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080016a0 	.word	0x080016a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080016a0 	.word	0x080016a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SPI2_SelectSlave>:
	// Enable SPI2
	SPI2->CR1 |= SPI_CR1_SPE;
}

void SPI2_SelectSlave(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	// Pull CS low
	GPIOB->BSRR = (1 << 28);
 8000284:	4b04      	ldr	r3, [pc, #16]	@ (8000298 <SPI2_SelectSlave+0x18>)
 8000286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800028a:	619a      	str	r2, [r3, #24]
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40020400 	.word	0x40020400

0800029c <SPI2_DeselectSlave>:

void SPI2_DeselectSlave(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
    	// Pull CS high
    	GPIOB->BSRR = (1 << 12);
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <SPI2_DeselectSlave+0x18>)
 80002a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002a6:	619a      	str	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40020400 	.word	0x40020400

080002b8 <SPI2_TransmitReceiveByte>:

uint8_t SPI2_TransmitReceiveByte(uint8_t data)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
    	// Wait until TXE (Transmit buffer empty)
    	while(!(SPI2->SR & SPI_SR_TXE));
 80002c2:	bf00      	nop
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <SPI2_TransmitReceiveByte+0x40>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	f003 0302 	and.w	r3, r3, #2
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <SPI2_TransmitReceiveByte+0xc>
    	// Send data
    	SPI2->DR = data;
 80002d0:	4a09      	ldr	r2, [pc, #36]	@ (80002f8 <SPI2_TransmitReceiveByte+0x40>)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	60d3      	str	r3, [r2, #12]
    	// Wait until RXNE (Receive buffer not empty)
    	while(!(SPI2->SR & SPI_SR_RXNE));
 80002d6:	bf00      	nop
 80002d8:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <SPI2_TransmitReceiveByte+0x40>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	f003 0301 	and.w	r3, r3, #1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d0f9      	beq.n	80002d8 <SPI2_TransmitReceiveByte+0x20>
    	// Return received data
    	return (uint8_t)(SPI2->DR);
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <SPI2_TransmitReceiveByte+0x40>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	b2db      	uxtb	r3, r3
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40003800 	.word	0x40003800

080002fc <CheckR1>:
#include "SDCard/CMD.h"
#include <stdio.h>
#include <stdint.h>

static void CheckR1(uint8_t r1)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]
    printf("R1 Response: 0x%02X\n", r1);
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	4619      	mov	r1, r3
 800030a:	4823      	ldr	r0, [pc, #140]	@ (8000398 <CheckR1+0x9c>)
 800030c:	f000 fafc 	bl	8000908 <iprintf>

    if (r1 & R1_IDLE_STATE)
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	2b00      	cmp	r3, #0
 8000318:	d002      	beq.n	8000320 <CheckR1+0x24>
    	printf("- Card is in Idle State\n");
 800031a:	4820      	ldr	r0, [pc, #128]	@ (800039c <CheckR1+0xa0>)
 800031c:	f000 fb5c 	bl	80009d8 <puts>
    if (r1 & R1_ERASE_RESET)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 0302 	and.w	r3, r3, #2
 8000326:	2b00      	cmp	r3, #0
 8000328:	d002      	beq.n	8000330 <CheckR1+0x34>
    	printf("- Erase Reset occurred\n");
 800032a:	481d      	ldr	r0, [pc, #116]	@ (80003a0 <CheckR1+0xa4>)
 800032c:	f000 fb54 	bl	80009d8 <puts>
    if (r1 & R1_ILLEGAL_COMMAND)
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	f003 0304 	and.w	r3, r3, #4
 8000336:	2b00      	cmp	r3, #0
 8000338:	d002      	beq.n	8000340 <CheckR1+0x44>
    	printf("- Illegal Command\n");
 800033a:	481a      	ldr	r0, [pc, #104]	@ (80003a4 <CheckR1+0xa8>)
 800033c:	f000 fb4c 	bl	80009d8 <puts>
    if (r1 & R1_COM_CRC_ERROR)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	f003 0308 	and.w	r3, r3, #8
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <CheckR1+0x54>
    	printf("- Command CRC Error\n");
 800034a:	4817      	ldr	r0, [pc, #92]	@ (80003a8 <CheckR1+0xac>)
 800034c:	f000 fb44 	bl	80009d8 <puts>
    if (r1 & R1_ERASE_SEQ_ERROR)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	f003 0310 	and.w	r3, r3, #16
 8000356:	2b00      	cmp	r3, #0
 8000358:	d002      	beq.n	8000360 <CheckR1+0x64>
    	printf("- Erase Sequence Error\n");
 800035a:	4814      	ldr	r0, [pc, #80]	@ (80003ac <CheckR1+0xb0>)
 800035c:	f000 fb3c 	bl	80009d8 <puts>
    if (r1 & R1_ADDRESS_ERROR)
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 0320 	and.w	r3, r3, #32
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <CheckR1+0x74>
    	printf("- Address Mis-aligned\n");
 800036a:	4811      	ldr	r0, [pc, #68]	@ (80003b0 <CheckR1+0xb4>)
 800036c:	f000 fb34 	bl	80009d8 <puts>
    if (r1 & R1_PARAMETER_ERROR)
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000376:	2b00      	cmp	r3, #0
 8000378:	d002      	beq.n	8000380 <CheckR1+0x84>
    	printf("- Parameter Error\n");
 800037a:	480e      	ldr	r0, [pc, #56]	@ (80003b4 <CheckR1+0xb8>)
 800037c:	f000 fb2c 	bl	80009d8 <puts>
    if (!(r1 & 0xFE))
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8000386:	2b00      	cmp	r3, #0
 8000388:	d102      	bne.n	8000390 <CheckR1+0x94>
    	printf("- No Errors\n");
 800038a:	480b      	ldr	r0, [pc, #44]	@ (80003b8 <CheckR1+0xbc>)
 800038c:	f000 fb24 	bl	80009d8 <puts>
}
 8000390:	bf00      	nop
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	080016b8 	.word	0x080016b8
 800039c:	080016d0 	.word	0x080016d0
 80003a0:	080016e8 	.word	0x080016e8
 80003a4:	08001700 	.word	0x08001700
 80003a8:	08001714 	.word	0x08001714
 80003ac:	08001728 	.word	0x08001728
 80003b0:	08001740 	.word	0x08001740
 80003b4:	08001758 	.word	0x08001758
 80003b8:	0800176c 	.word	0x0800176c

080003bc <CheckR3>:


static void CheckR3(uint32_t r3)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    printf("R3 Response: 0x%08X\n", (unsigned int)r3);
 80003c4:	6879      	ldr	r1, [r7, #4]
 80003c6:	480a      	ldr	r0, [pc, #40]	@ (80003f0 <CheckR3+0x34>)
 80003c8:	f000 fa9e 	bl	8000908 <iprintf>

    if (r3 & R3_POWER_UP_STATUS)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	da03      	bge.n	80003da <CheckR3+0x1e>
    {
        printf("- Card is Powered Up and Ready\n");
 80003d2:	4808      	ldr	r0, [pc, #32]	@ (80003f4 <CheckR3+0x38>)
 80003d4:	f000 fb00 	bl	80009d8 <puts>
 80003d8:	e002      	b.n	80003e0 <CheckR3+0x24>
    }
    else
    {
        printf("- Card is NOT Powered Up\n");
 80003da:	4807      	ldr	r0, [pc, #28]	@ (80003f8 <CheckR3+0x3c>)
 80003dc:	f000 fafc 	bl	80009d8 <puts>
    }

    printf("- OCR Value: 0x%08X\n", (unsigned int)(r3 & R3_OCR_MASK));
 80003e0:	6879      	ldr	r1, [r7, #4]
 80003e2:	4806      	ldr	r0, [pc, #24]	@ (80003fc <CheckR3+0x40>)
 80003e4:	f000 fa90 	bl	8000908 <iprintf>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	08001778 	.word	0x08001778
 80003f4:	08001790 	.word	0x08001790
 80003f8:	080017b0 	.word	0x080017b0
 80003fc:	080017cc 	.word	0x080017cc

08000400 <CheckR7>:


static void CheckR7(uint32_t r7)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
    printf("R7 Response: 0x%08X\n", (unsigned int)r7);
 8000408:	6879      	ldr	r1, [r7, #4]
 800040a:	4812      	ldr	r0, [pc, #72]	@ (8000454 <CheckR7+0x54>)
 800040c:	f000 fa7c 	bl	8000908 <iprintf>

    uint8_t voltage = (r7 & R7_VOLTAGE_ACCEPTED) >> 8;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	b2db      	uxtb	r3, r3
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	73fb      	strb	r3, [r7, #15]
    printf("- Voltage Accepted: 0x%02X\n", voltage);
 800041c:	7bfb      	ldrb	r3, [r7, #15]
 800041e:	4619      	mov	r1, r3
 8000420:	480d      	ldr	r0, [pc, #52]	@ (8000458 <CheckR7+0x58>)
 8000422:	f000 fa71 	bl	8000908 <iprintf>

    uint8_t pattern = R7_GET_PATTERN(r7);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	73bb      	strb	r3, [r7, #14]
    printf("- Check Pattern: 0x%02X\n", pattern);
 800042a:	7bbb      	ldrb	r3, [r7, #14]
 800042c:	4619      	mov	r1, r3
 800042e:	480b      	ldr	r0, [pc, #44]	@ (800045c <CheckR7+0x5c>)
 8000430:	f000 fa6a 	bl	8000908 <iprintf>

    if (R7_IS_VALID(r7))
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f5b3 7fd5 	cmp.w	r3, #426	@ 0x1aa
 800043a:	d103      	bne.n	8000444 <CheckR7+0x44>
    {
        printf("- R7 Response is Valid\n");
 800043c:	4808      	ldr	r0, [pc, #32]	@ (8000460 <CheckR7+0x60>)
 800043e:	f000 facb 	bl	80009d8 <puts>
    }
    else
    {
        printf("- R7 Response is NOT Valid\n");
    }
}
 8000442:	e002      	b.n	800044a <CheckR7+0x4a>
        printf("- R7 Response is NOT Valid\n");
 8000444:	4807      	ldr	r0, [pc, #28]	@ (8000464 <CheckR7+0x64>)
 8000446:	f000 fac7 	bl	80009d8 <puts>
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	080017e4 	.word	0x080017e4
 8000458:	080017fc 	.word	0x080017fc
 800045c:	08001818 	.word	0x08001818
 8000460:	08001834 	.word	0x08001834
 8000464:	0800184c 	.word	0x0800184c

08000468 <CheckResponse>:


void CheckResponse(uint8_t cmd, uint32_t response)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	71fb      	strb	r3, [r7, #7]
    switch (cmd)
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	2b58      	cmp	r3, #88	@ 0x58
 8000478:	dc17      	bgt.n	80004aa <CheckResponse+0x42>
 800047a:	2b40      	cmp	r3, #64	@ 0x40
 800047c:	db26      	blt.n	80004cc <CheckResponse+0x64>
 800047e:	3b40      	subs	r3, #64	@ 0x40
 8000480:	2201      	movs	r2, #1
 8000482:	409a      	lsls	r2, r3
 8000484:	4b17      	ldr	r3, [pc, #92]	@ (80004e4 <CheckResponse+0x7c>)
 8000486:	4013      	ands	r3, r2
 8000488:	2b00      	cmp	r3, #0
 800048a:	bf14      	ite	ne
 800048c:	2301      	movne	r3, #1
 800048e:	2300      	moveq	r3, #0
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b00      	cmp	r3, #0
 8000494:	d10c      	bne.n	80004b0 <CheckResponse+0x48>
 8000496:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800049a:	2b00      	cmp	r3, #0
 800049c:	bf14      	ite	ne
 800049e:	2301      	movne	r3, #1
 80004a0:	2300      	moveq	r3, #0
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d10d      	bne.n	80004c4 <CheckResponse+0x5c>
 80004a8:	e010      	b.n	80004cc <CheckResponse+0x64>
 80004aa:	2b7a      	cmp	r3, #122	@ 0x7a
 80004ac:	d006      	beq.n	80004bc <CheckResponse+0x54>
 80004ae:	e00d      	b.n	80004cc <CheckResponse+0x64>
        case CMD_INIT_AND_READY   :
        case CMD_STOP_TRANSMISSION:
        case CMD_SET_BLOCKLEN     :
        case CMD_READ_SINGLE_BLOCK:
        case CMD_WRITE_BLOCK      :
        			CheckR1((uint8_t)response);
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ff21 	bl	80002fc <CheckR1>
            		break;
 80004ba:	e00f      	b.n	80004dc <CheckResponse+0x74>

        case CMD_GET_CARD_CONDITIONS:
        			CheckR3(response);
 80004bc:	6838      	ldr	r0, [r7, #0]
 80004be:	f7ff ff7d 	bl	80003bc <CheckR3>
            		break;
 80004c2:	e00b      	b.n	80004dc <CheckResponse+0x74>

        case CMD_CHECK_VOLT_LEVEL:  CheckR7(response);
 80004c4:	6838      	ldr	r0, [r7, #0]
 80004c6:	f7ff ff9b 	bl	8000400 <CheckR7>
            	    break;
 80004ca:	e007      	b.n	80004dc <CheckResponse+0x74>

        default:	printf("Unknown or unsupported response type for CMD%d\n", cmd & 0x3F);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80004d2:	4619      	mov	r1, r3
 80004d4:	4804      	ldr	r0, [pc, #16]	@ (80004e8 <CheckResponse+0x80>)
 80004d6:	f000 fa17 	bl	8000908 <iprintf>
        			break;
 80004da:	bf00      	nop
    }
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	01031003 	.word	0x01031003
 80004e8:	08001868 	.word	0x08001868

080004ec <SD_SendCommand>:
#include "SDCard/SDCard.h"

#include <stdio.h>

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71bb      	strb	r3, [r7, #6]
    uint8_t response;
    SPI2_SelectSlave();
 80004fc:	f7ff fec0 	bl	8000280 <SPI2_SelectSlave>
    SPI2_TransmitReceiveByte(cmd);                    // Command byte
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fed8 	bl	80002b8 <SPI2_TransmitReceiveByte>
    SPI2_TransmitReceiveByte((arg >> 24) & 0xFF);     // Argument byte 3
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	0e1b      	lsrs	r3, r3, #24
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff fed2 	bl	80002b8 <SPI2_TransmitReceiveByte>
    SPI2_TransmitReceiveByte((arg >> 16) & 0xFF);     // Argument byte 2
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	0c1b      	lsrs	r3, r3, #16
 8000518:	b2db      	uxtb	r3, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff fecc 	bl	80002b8 <SPI2_TransmitReceiveByte>
    SPI2_TransmitReceiveByte((arg >> 8) & 0xFF);      // Argument byte 1
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	0a1b      	lsrs	r3, r3, #8
 8000524:	b2db      	uxtb	r3, r3
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fec6 	bl	80002b8 <SPI2_TransmitReceiveByte>
    SPI2_TransmitReceiveByte(arg & 0xFF);             // Argument byte 0
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fec1 	bl	80002b8 <SPI2_TransmitReceiveByte>
    SPI2_TransmitReceiveByte(crc);                    // CRC byte
 8000536:	79bb      	ldrb	r3, [r7, #6]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff febd 	bl	80002b8 <SPI2_TransmitReceiveByte>

    for (int i = 0; i < 8; i++)
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	e00b      	b.n	800055c <SD_SendCommand+0x70>
    {
        response = SPI2_TransmitReceiveByte(0xFF);
 8000544:	20ff      	movs	r0, #255	@ 0xff
 8000546:	f7ff feb7 	bl	80002b8 <SPI2_TransmitReceiveByte>
 800054a:	4603      	mov	r3, r0
 800054c:	73fb      	strb	r3, [r7, #15]
        if ((response & 0x80) == 0)
 800054e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000552:	2b00      	cmp	r3, #0
 8000554:	da06      	bge.n	8000564 <SD_SendCommand+0x78>
    for (int i = 0; i < 8; i++)
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	3301      	adds	r3, #1
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	2b07      	cmp	r3, #7
 8000560:	ddf0      	ble.n	8000544 <SD_SendCommand+0x58>
 8000562:	e000      	b.n	8000566 <SD_SendCommand+0x7a>
        {
            break;
 8000564:	bf00      	nop
        }
    }

    SPI2_DeselectSlave();
 8000566:	f7ff fe99 	bl	800029c <SPI2_DeselectSlave>
    return response;
 800056a:	7bfb      	ldrb	r3, [r7, #15]
}
 800056c:	4618      	mov	r0, r3
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <SD_Reset>:

uint8_t SD_Reset(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
    uint8_t response;

    // Send CMD0 (GO_IDLE_STATE) to Reset the Card
    response = SD_SendCommand(CMD_RESET_AND_IDLE, 0x00000000, 0x95);
 800057a:	2295      	movs	r2, #149	@ 0x95
 800057c:	2100      	movs	r1, #0
 800057e:	2040      	movs	r0, #64	@ 0x40
 8000580:	f7ff ffb4 	bl	80004ec <SD_SendCommand>
 8000584:	4603      	mov	r3, r0
 8000586:	71fb      	strb	r3, [r7, #7]
    CheckResponse(CMD_RESET_AND_IDLE, response);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4619      	mov	r1, r3
 800058c:	2040      	movs	r0, #64	@ 0x40
 800058e:	f7ff ff6b 	bl	8000468 <CheckResponse>
    if (!(response & R1_IDLE_STATE))
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d106      	bne.n	80005aa <SD_Reset+0x36>
    {
        printf("Card reset failed. Not in Idle State. Response: 0x%02X\n\r", response);
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4619      	mov	r1, r3
 80005a0:	480c      	ldr	r0, [pc, #48]	@ (80005d4 <SD_Reset+0x60>)
 80005a2:	f000 f9b1 	bl	8000908 <iprintf>
        return response;
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	e010      	b.n	80005cc <SD_Reset+0x58>
    }

    // Send CMD8 (SEND_IF_COND) to Check the Voltage Range
    response = SD_SendCommand(CMD_CHECK_VOLT_LEVEL, 0x000001AA, 0x87);
 80005aa:	2287      	movs	r2, #135	@ 0x87
 80005ac:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80005b0:	2048      	movs	r0, #72	@ 0x48
 80005b2:	f7ff ff9b 	bl	80004ec <SD_SendCommand>
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
    CheckResponse(CMD_CHECK_VOLT_LEVEL, response);
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4619      	mov	r1, r3
 80005be:	2048      	movs	r0, #72	@ 0x48
 80005c0:	f7ff ff52 	bl	8000468 <CheckResponse>
    if (!R7_IS_VALID(response))
    {
        printf("Card does not support the Voltage range.\n\r");
 80005c4:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <SD_Reset+0x64>)
 80005c6:	f000 f99f 	bl	8000908 <iprintf>
        return response;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
    }

    // Card initialization completed successfully
    printf("SD card Reset and Initialization completed successfully.\n\r");
    return 0x00;
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	08001898 	.word	0x08001898
 80005d8:	080018d4 	.word	0x080018d4

080005dc <main>:
#include <stdint.h>
#include "SDCard/SDCard.h"


int main()
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	SD_Reset();
 80005e0:	f7ff ffc8 	bl	8000574 <SD_Reset>

	while(1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <main+0x8>

080005e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e00a      	b.n	8000610 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005fa:	f3af 8000 	nop.w
 80005fe:	4601      	mov	r1, r0
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	b2ca      	uxtb	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbf0      	blt.n	80005fa <_read+0x12>
  }

  return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	e009      	b.n	8000648 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	60ba      	str	r2, [r7, #8]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	3301      	adds	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	dbf1      	blt.n	8000634 <_write+0x12>
  }
  return len;
 8000650:	687b      	ldr	r3, [r7, #4]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <_close>:

int _close(int file)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000682:	605a      	str	r2, [r3, #4]
  return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_isatty>:

int _isatty(int file)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006cc:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <_sbrk+0x5c>)
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <_sbrk+0x60>)
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <_sbrk+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <_sbrk+0x64>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <_sbrk+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d207      	bcs.n	8000704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f4:	f000 fa9e 	bl	8000c34 <__errno>
 80006f8:	4603      	mov	r3, r0
 80006fa:	220c      	movs	r2, #12
 80006fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	e009      	b.n	8000718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000704:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070a:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	4a05      	ldr	r2, [pc, #20]	@ (8000728 <_sbrk+0x64>)
 8000714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20018000 	.word	0x20018000
 8000724:	00000400 	.word	0x00000400
 8000728:	20000078 	.word	0x20000078
 800072c:	200001c8 	.word	0x200001c8

08000730 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000730:	480d      	ldr	r0, [pc, #52]	@ (8000768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000732:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000734:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	@ (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	@ (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	@ (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	@ (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800075e:	f000 fa6f 	bl	8000c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000762:	f7ff ff3b 	bl	80005dc <main>

08000766 <LoopForever>:

LoopForever:
  b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   r0, =_estack
 8000768:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000774:	08001944 	.word	0x08001944
  ldr r2, =_sbss
 8000778:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800077c:	200001c8 	.word	0x200001c8

08000780 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC_IRQHandler>
	...

08000784 <std>:
 8000784:	2300      	movs	r3, #0
 8000786:	b510      	push	{r4, lr}
 8000788:	4604      	mov	r4, r0
 800078a:	e9c0 3300 	strd	r3, r3, [r0]
 800078e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000792:	6083      	str	r3, [r0, #8]
 8000794:	8181      	strh	r1, [r0, #12]
 8000796:	6643      	str	r3, [r0, #100]	@ 0x64
 8000798:	81c2      	strh	r2, [r0, #14]
 800079a:	6183      	str	r3, [r0, #24]
 800079c:	4619      	mov	r1, r3
 800079e:	2208      	movs	r2, #8
 80007a0:	305c      	adds	r0, #92	@ 0x5c
 80007a2:	f000 f9f9 	bl	8000b98 <memset>
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <std+0x58>)
 80007a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80007aa:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <std+0x5c>)
 80007ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007ae:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <std+0x60>)
 80007b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007b2:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <std+0x64>)
 80007b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80007b6:	4b0d      	ldr	r3, [pc, #52]	@ (80007ec <std+0x68>)
 80007b8:	6224      	str	r4, [r4, #32]
 80007ba:	429c      	cmp	r4, r3
 80007bc:	d006      	beq.n	80007cc <std+0x48>
 80007be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007c2:	4294      	cmp	r4, r2
 80007c4:	d002      	beq.n	80007cc <std+0x48>
 80007c6:	33d0      	adds	r3, #208	@ 0xd0
 80007c8:	429c      	cmp	r4, r3
 80007ca:	d105      	bne.n	80007d8 <std+0x54>
 80007cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007d4:	f000 ba58 	b.w	8000c88 <__retarget_lock_init_recursive>
 80007d8:	bd10      	pop	{r4, pc}
 80007da:	bf00      	nop
 80007dc:	080009e9 	.word	0x080009e9
 80007e0:	08000a0b 	.word	0x08000a0b
 80007e4:	08000a43 	.word	0x08000a43
 80007e8:	08000a67 	.word	0x08000a67
 80007ec:	2000007c 	.word	0x2000007c

080007f0 <stdio_exit_handler>:
 80007f0:	4a02      	ldr	r2, [pc, #8]	@ (80007fc <stdio_exit_handler+0xc>)
 80007f2:	4903      	ldr	r1, [pc, #12]	@ (8000800 <stdio_exit_handler+0x10>)
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <stdio_exit_handler+0x14>)
 80007f6:	f000 b869 	b.w	80008cc <_fwalk_sglue>
 80007fa:	bf00      	nop
 80007fc:	20000000 	.word	0x20000000
 8000800:	08001529 	.word	0x08001529
 8000804:	20000010 	.word	0x20000010

08000808 <cleanup_stdio>:
 8000808:	6841      	ldr	r1, [r0, #4]
 800080a:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <cleanup_stdio+0x34>)
 800080c:	4299      	cmp	r1, r3
 800080e:	b510      	push	{r4, lr}
 8000810:	4604      	mov	r4, r0
 8000812:	d001      	beq.n	8000818 <cleanup_stdio+0x10>
 8000814:	f000 fe88 	bl	8001528 <_fflush_r>
 8000818:	68a1      	ldr	r1, [r4, #8]
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <cleanup_stdio+0x38>)
 800081c:	4299      	cmp	r1, r3
 800081e:	d002      	beq.n	8000826 <cleanup_stdio+0x1e>
 8000820:	4620      	mov	r0, r4
 8000822:	f000 fe81 	bl	8001528 <_fflush_r>
 8000826:	68e1      	ldr	r1, [r4, #12]
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <cleanup_stdio+0x3c>)
 800082a:	4299      	cmp	r1, r3
 800082c:	d004      	beq.n	8000838 <cleanup_stdio+0x30>
 800082e:	4620      	mov	r0, r4
 8000830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000834:	f000 be78 	b.w	8001528 <_fflush_r>
 8000838:	bd10      	pop	{r4, pc}
 800083a:	bf00      	nop
 800083c:	2000007c 	.word	0x2000007c
 8000840:	200000e4 	.word	0x200000e4
 8000844:	2000014c 	.word	0x2000014c

08000848 <global_stdio_init.part.0>:
 8000848:	b510      	push	{r4, lr}
 800084a:	4b0b      	ldr	r3, [pc, #44]	@ (8000878 <global_stdio_init.part.0+0x30>)
 800084c:	4c0b      	ldr	r4, [pc, #44]	@ (800087c <global_stdio_init.part.0+0x34>)
 800084e:	4a0c      	ldr	r2, [pc, #48]	@ (8000880 <global_stdio_init.part.0+0x38>)
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	4620      	mov	r0, r4
 8000854:	2200      	movs	r2, #0
 8000856:	2104      	movs	r1, #4
 8000858:	f7ff ff94 	bl	8000784 <std>
 800085c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000860:	2201      	movs	r2, #1
 8000862:	2109      	movs	r1, #9
 8000864:	f7ff ff8e 	bl	8000784 <std>
 8000868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800086c:	2202      	movs	r2, #2
 800086e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000872:	2112      	movs	r1, #18
 8000874:	f7ff bf86 	b.w	8000784 <std>
 8000878:	200001b4 	.word	0x200001b4
 800087c:	2000007c 	.word	0x2000007c
 8000880:	080007f1 	.word	0x080007f1

08000884 <__sfp_lock_acquire>:
 8000884:	4801      	ldr	r0, [pc, #4]	@ (800088c <__sfp_lock_acquire+0x8>)
 8000886:	f000 ba00 	b.w	8000c8a <__retarget_lock_acquire_recursive>
 800088a:	bf00      	nop
 800088c:	200001bd 	.word	0x200001bd

08000890 <__sfp_lock_release>:
 8000890:	4801      	ldr	r0, [pc, #4]	@ (8000898 <__sfp_lock_release+0x8>)
 8000892:	f000 b9fb 	b.w	8000c8c <__retarget_lock_release_recursive>
 8000896:	bf00      	nop
 8000898:	200001bd 	.word	0x200001bd

0800089c <__sinit>:
 800089c:	b510      	push	{r4, lr}
 800089e:	4604      	mov	r4, r0
 80008a0:	f7ff fff0 	bl	8000884 <__sfp_lock_acquire>
 80008a4:	6a23      	ldr	r3, [r4, #32]
 80008a6:	b11b      	cbz	r3, 80008b0 <__sinit+0x14>
 80008a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008ac:	f7ff bff0 	b.w	8000890 <__sfp_lock_release>
 80008b0:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <__sinit+0x28>)
 80008b2:	6223      	str	r3, [r4, #32]
 80008b4:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <__sinit+0x2c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d1f5      	bne.n	80008a8 <__sinit+0xc>
 80008bc:	f7ff ffc4 	bl	8000848 <global_stdio_init.part.0>
 80008c0:	e7f2      	b.n	80008a8 <__sinit+0xc>
 80008c2:	bf00      	nop
 80008c4:	08000809 	.word	0x08000809
 80008c8:	200001b4 	.word	0x200001b4

080008cc <_fwalk_sglue>:
 80008cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008d0:	4607      	mov	r7, r0
 80008d2:	4688      	mov	r8, r1
 80008d4:	4614      	mov	r4, r2
 80008d6:	2600      	movs	r6, #0
 80008d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008dc:	f1b9 0901 	subs.w	r9, r9, #1
 80008e0:	d505      	bpl.n	80008ee <_fwalk_sglue+0x22>
 80008e2:	6824      	ldr	r4, [r4, #0]
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d1f7      	bne.n	80008d8 <_fwalk_sglue+0xc>
 80008e8:	4630      	mov	r0, r6
 80008ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ee:	89ab      	ldrh	r3, [r5, #12]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d907      	bls.n	8000904 <_fwalk_sglue+0x38>
 80008f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008f8:	3301      	adds	r3, #1
 80008fa:	d003      	beq.n	8000904 <_fwalk_sglue+0x38>
 80008fc:	4629      	mov	r1, r5
 80008fe:	4638      	mov	r0, r7
 8000900:	47c0      	blx	r8
 8000902:	4306      	orrs	r6, r0
 8000904:	3568      	adds	r5, #104	@ 0x68
 8000906:	e7e9      	b.n	80008dc <_fwalk_sglue+0x10>

08000908 <iprintf>:
 8000908:	b40f      	push	{r0, r1, r2, r3}
 800090a:	b507      	push	{r0, r1, r2, lr}
 800090c:	4906      	ldr	r1, [pc, #24]	@ (8000928 <iprintf+0x20>)
 800090e:	ab04      	add	r3, sp, #16
 8000910:	6808      	ldr	r0, [r1, #0]
 8000912:	f853 2b04 	ldr.w	r2, [r3], #4
 8000916:	6881      	ldr	r1, [r0, #8]
 8000918:	9301      	str	r3, [sp, #4]
 800091a:	f000 fadb 	bl	8000ed4 <_vfiprintf_r>
 800091e:	b003      	add	sp, #12
 8000920:	f85d eb04 	ldr.w	lr, [sp], #4
 8000924:	b004      	add	sp, #16
 8000926:	4770      	bx	lr
 8000928:	2000000c 	.word	0x2000000c

0800092c <_puts_r>:
 800092c:	6a03      	ldr	r3, [r0, #32]
 800092e:	b570      	push	{r4, r5, r6, lr}
 8000930:	6884      	ldr	r4, [r0, #8]
 8000932:	4605      	mov	r5, r0
 8000934:	460e      	mov	r6, r1
 8000936:	b90b      	cbnz	r3, 800093c <_puts_r+0x10>
 8000938:	f7ff ffb0 	bl	800089c <__sinit>
 800093c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800093e:	07db      	lsls	r3, r3, #31
 8000940:	d405      	bmi.n	800094e <_puts_r+0x22>
 8000942:	89a3      	ldrh	r3, [r4, #12]
 8000944:	0598      	lsls	r0, r3, #22
 8000946:	d402      	bmi.n	800094e <_puts_r+0x22>
 8000948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800094a:	f000 f99e 	bl	8000c8a <__retarget_lock_acquire_recursive>
 800094e:	89a3      	ldrh	r3, [r4, #12]
 8000950:	0719      	lsls	r1, r3, #28
 8000952:	d502      	bpl.n	800095a <_puts_r+0x2e>
 8000954:	6923      	ldr	r3, [r4, #16]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d135      	bne.n	80009c6 <_puts_r+0x9a>
 800095a:	4621      	mov	r1, r4
 800095c:	4628      	mov	r0, r5
 800095e:	f000 f8c5 	bl	8000aec <__swsetup_r>
 8000962:	b380      	cbz	r0, 80009c6 <_puts_r+0x9a>
 8000964:	f04f 35ff 	mov.w	r5, #4294967295
 8000968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800096a:	07da      	lsls	r2, r3, #31
 800096c:	d405      	bmi.n	800097a <_puts_r+0x4e>
 800096e:	89a3      	ldrh	r3, [r4, #12]
 8000970:	059b      	lsls	r3, r3, #22
 8000972:	d402      	bmi.n	800097a <_puts_r+0x4e>
 8000974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000976:	f000 f989 	bl	8000c8c <__retarget_lock_release_recursive>
 800097a:	4628      	mov	r0, r5
 800097c:	bd70      	pop	{r4, r5, r6, pc}
 800097e:	2b00      	cmp	r3, #0
 8000980:	da04      	bge.n	800098c <_puts_r+0x60>
 8000982:	69a2      	ldr	r2, [r4, #24]
 8000984:	429a      	cmp	r2, r3
 8000986:	dc17      	bgt.n	80009b8 <_puts_r+0x8c>
 8000988:	290a      	cmp	r1, #10
 800098a:	d015      	beq.n	80009b8 <_puts_r+0x8c>
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	1c5a      	adds	r2, r3, #1
 8000990:	6022      	str	r2, [r4, #0]
 8000992:	7019      	strb	r1, [r3, #0]
 8000994:	68a3      	ldr	r3, [r4, #8]
 8000996:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800099a:	3b01      	subs	r3, #1
 800099c:	60a3      	str	r3, [r4, #8]
 800099e:	2900      	cmp	r1, #0
 80009a0:	d1ed      	bne.n	800097e <_puts_r+0x52>
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	da11      	bge.n	80009ca <_puts_r+0x9e>
 80009a6:	4622      	mov	r2, r4
 80009a8:	210a      	movs	r1, #10
 80009aa:	4628      	mov	r0, r5
 80009ac:	f000 f85f 	bl	8000a6e <__swbuf_r>
 80009b0:	3001      	adds	r0, #1
 80009b2:	d0d7      	beq.n	8000964 <_puts_r+0x38>
 80009b4:	250a      	movs	r5, #10
 80009b6:	e7d7      	b.n	8000968 <_puts_r+0x3c>
 80009b8:	4622      	mov	r2, r4
 80009ba:	4628      	mov	r0, r5
 80009bc:	f000 f857 	bl	8000a6e <__swbuf_r>
 80009c0:	3001      	adds	r0, #1
 80009c2:	d1e7      	bne.n	8000994 <_puts_r+0x68>
 80009c4:	e7ce      	b.n	8000964 <_puts_r+0x38>
 80009c6:	3e01      	subs	r6, #1
 80009c8:	e7e4      	b.n	8000994 <_puts_r+0x68>
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	6022      	str	r2, [r4, #0]
 80009d0:	220a      	movs	r2, #10
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e7ee      	b.n	80009b4 <_puts_r+0x88>
	...

080009d8 <puts>:
 80009d8:	4b02      	ldr	r3, [pc, #8]	@ (80009e4 <puts+0xc>)
 80009da:	4601      	mov	r1, r0
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	f7ff bfa5 	b.w	800092c <_puts_r>
 80009e2:	bf00      	nop
 80009e4:	2000000c 	.word	0x2000000c

080009e8 <__sread>:
 80009e8:	b510      	push	{r4, lr}
 80009ea:	460c      	mov	r4, r1
 80009ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009f0:	f000 f8fc 	bl	8000bec <_read_r>
 80009f4:	2800      	cmp	r0, #0
 80009f6:	bfab      	itete	ge
 80009f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80009fa:	89a3      	ldrhlt	r3, [r4, #12]
 80009fc:	181b      	addge	r3, r3, r0
 80009fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a02:	bfac      	ite	ge
 8000a04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a06:	81a3      	strhlt	r3, [r4, #12]
 8000a08:	bd10      	pop	{r4, pc}

08000a0a <__swrite>:
 8000a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a0e:	461f      	mov	r7, r3
 8000a10:	898b      	ldrh	r3, [r1, #12]
 8000a12:	05db      	lsls	r3, r3, #23
 8000a14:	4605      	mov	r5, r0
 8000a16:	460c      	mov	r4, r1
 8000a18:	4616      	mov	r6, r2
 8000a1a:	d505      	bpl.n	8000a28 <__swrite+0x1e>
 8000a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a20:	2302      	movs	r3, #2
 8000a22:	2200      	movs	r2, #0
 8000a24:	f000 f8d0 	bl	8000bc8 <_lseek_r>
 8000a28:	89a3      	ldrh	r3, [r4, #12]
 8000a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a32:	81a3      	strh	r3, [r4, #12]
 8000a34:	4632      	mov	r2, r6
 8000a36:	463b      	mov	r3, r7
 8000a38:	4628      	mov	r0, r5
 8000a3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a3e:	f000 b8e7 	b.w	8000c10 <_write_r>

08000a42 <__sseek>:
 8000a42:	b510      	push	{r4, lr}
 8000a44:	460c      	mov	r4, r1
 8000a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a4a:	f000 f8bd 	bl	8000bc8 <_lseek_r>
 8000a4e:	1c43      	adds	r3, r0, #1
 8000a50:	89a3      	ldrh	r3, [r4, #12]
 8000a52:	bf15      	itete	ne
 8000a54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a5e:	81a3      	strheq	r3, [r4, #12]
 8000a60:	bf18      	it	ne
 8000a62:	81a3      	strhne	r3, [r4, #12]
 8000a64:	bd10      	pop	{r4, pc}

08000a66 <__sclose>:
 8000a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a6a:	f000 b89d 	b.w	8000ba8 <_close_r>

08000a6e <__swbuf_r>:
 8000a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a70:	460e      	mov	r6, r1
 8000a72:	4614      	mov	r4, r2
 8000a74:	4605      	mov	r5, r0
 8000a76:	b118      	cbz	r0, 8000a80 <__swbuf_r+0x12>
 8000a78:	6a03      	ldr	r3, [r0, #32]
 8000a7a:	b90b      	cbnz	r3, 8000a80 <__swbuf_r+0x12>
 8000a7c:	f7ff ff0e 	bl	800089c <__sinit>
 8000a80:	69a3      	ldr	r3, [r4, #24]
 8000a82:	60a3      	str	r3, [r4, #8]
 8000a84:	89a3      	ldrh	r3, [r4, #12]
 8000a86:	071a      	lsls	r2, r3, #28
 8000a88:	d501      	bpl.n	8000a8e <__swbuf_r+0x20>
 8000a8a:	6923      	ldr	r3, [r4, #16]
 8000a8c:	b943      	cbnz	r3, 8000aa0 <__swbuf_r+0x32>
 8000a8e:	4621      	mov	r1, r4
 8000a90:	4628      	mov	r0, r5
 8000a92:	f000 f82b 	bl	8000aec <__swsetup_r>
 8000a96:	b118      	cbz	r0, 8000aa0 <__swbuf_r+0x32>
 8000a98:	f04f 37ff 	mov.w	r7, #4294967295
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aa0:	6823      	ldr	r3, [r4, #0]
 8000aa2:	6922      	ldr	r2, [r4, #16]
 8000aa4:	1a98      	subs	r0, r3, r2
 8000aa6:	6963      	ldr	r3, [r4, #20]
 8000aa8:	b2f6      	uxtb	r6, r6
 8000aaa:	4283      	cmp	r3, r0
 8000aac:	4637      	mov	r7, r6
 8000aae:	dc05      	bgt.n	8000abc <__swbuf_r+0x4e>
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	f000 fd38 	bl	8001528 <_fflush_r>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	d1ed      	bne.n	8000a98 <__swbuf_r+0x2a>
 8000abc:	68a3      	ldr	r3, [r4, #8]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	60a3      	str	r3, [r4, #8]
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	6022      	str	r2, [r4, #0]
 8000ac8:	701e      	strb	r6, [r3, #0]
 8000aca:	6962      	ldr	r2, [r4, #20]
 8000acc:	1c43      	adds	r3, r0, #1
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d004      	beq.n	8000adc <__swbuf_r+0x6e>
 8000ad2:	89a3      	ldrh	r3, [r4, #12]
 8000ad4:	07db      	lsls	r3, r3, #31
 8000ad6:	d5e1      	bpl.n	8000a9c <__swbuf_r+0x2e>
 8000ad8:	2e0a      	cmp	r6, #10
 8000ada:	d1df      	bne.n	8000a9c <__swbuf_r+0x2e>
 8000adc:	4621      	mov	r1, r4
 8000ade:	4628      	mov	r0, r5
 8000ae0:	f000 fd22 	bl	8001528 <_fflush_r>
 8000ae4:	2800      	cmp	r0, #0
 8000ae6:	d0d9      	beq.n	8000a9c <__swbuf_r+0x2e>
 8000ae8:	e7d6      	b.n	8000a98 <__swbuf_r+0x2a>
	...

08000aec <__swsetup_r>:
 8000aec:	b538      	push	{r3, r4, r5, lr}
 8000aee:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <__swsetup_r+0xa8>)
 8000af0:	4605      	mov	r5, r0
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	460c      	mov	r4, r1
 8000af6:	b118      	cbz	r0, 8000b00 <__swsetup_r+0x14>
 8000af8:	6a03      	ldr	r3, [r0, #32]
 8000afa:	b90b      	cbnz	r3, 8000b00 <__swsetup_r+0x14>
 8000afc:	f7ff fece 	bl	800089c <__sinit>
 8000b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b04:	0719      	lsls	r1, r3, #28
 8000b06:	d422      	bmi.n	8000b4e <__swsetup_r+0x62>
 8000b08:	06da      	lsls	r2, r3, #27
 8000b0a:	d407      	bmi.n	8000b1c <__swsetup_r+0x30>
 8000b0c:	2209      	movs	r2, #9
 8000b0e:	602a      	str	r2, [r5, #0]
 8000b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b14:	81a3      	strh	r3, [r4, #12]
 8000b16:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1a:	e033      	b.n	8000b84 <__swsetup_r+0x98>
 8000b1c:	0758      	lsls	r0, r3, #29
 8000b1e:	d512      	bpl.n	8000b46 <__swsetup_r+0x5a>
 8000b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b22:	b141      	cbz	r1, 8000b36 <__swsetup_r+0x4a>
 8000b24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b28:	4299      	cmp	r1, r3
 8000b2a:	d002      	beq.n	8000b32 <__swsetup_r+0x46>
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	f000 f8af 	bl	8000c90 <_free_r>
 8000b32:	2300      	movs	r3, #0
 8000b34:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b36:	89a3      	ldrh	r3, [r4, #12]
 8000b38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000b3c:	81a3      	strh	r3, [r4, #12]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	6063      	str	r3, [r4, #4]
 8000b42:	6923      	ldr	r3, [r4, #16]
 8000b44:	6023      	str	r3, [r4, #0]
 8000b46:	89a3      	ldrh	r3, [r4, #12]
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	81a3      	strh	r3, [r4, #12]
 8000b4e:	6923      	ldr	r3, [r4, #16]
 8000b50:	b94b      	cbnz	r3, 8000b66 <__swsetup_r+0x7a>
 8000b52:	89a3      	ldrh	r3, [r4, #12]
 8000b54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b5c:	d003      	beq.n	8000b66 <__swsetup_r+0x7a>
 8000b5e:	4621      	mov	r1, r4
 8000b60:	4628      	mov	r0, r5
 8000b62:	f000 fd2f 	bl	80015c4 <__smakebuf_r>
 8000b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b6a:	f013 0201 	ands.w	r2, r3, #1
 8000b6e:	d00a      	beq.n	8000b86 <__swsetup_r+0x9a>
 8000b70:	2200      	movs	r2, #0
 8000b72:	60a2      	str	r2, [r4, #8]
 8000b74:	6962      	ldr	r2, [r4, #20]
 8000b76:	4252      	negs	r2, r2
 8000b78:	61a2      	str	r2, [r4, #24]
 8000b7a:	6922      	ldr	r2, [r4, #16]
 8000b7c:	b942      	cbnz	r2, 8000b90 <__swsetup_r+0xa4>
 8000b7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000b82:	d1c5      	bne.n	8000b10 <__swsetup_r+0x24>
 8000b84:	bd38      	pop	{r3, r4, r5, pc}
 8000b86:	0799      	lsls	r1, r3, #30
 8000b88:	bf58      	it	pl
 8000b8a:	6962      	ldrpl	r2, [r4, #20]
 8000b8c:	60a2      	str	r2, [r4, #8]
 8000b8e:	e7f4      	b.n	8000b7a <__swsetup_r+0x8e>
 8000b90:	2000      	movs	r0, #0
 8000b92:	e7f7      	b.n	8000b84 <__swsetup_r+0x98>
 8000b94:	2000000c 	.word	0x2000000c

08000b98 <memset>:
 8000b98:	4402      	add	r2, r0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d100      	bne.n	8000ba2 <memset+0xa>
 8000ba0:	4770      	bx	lr
 8000ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ba6:	e7f9      	b.n	8000b9c <memset+0x4>

08000ba8 <_close_r>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4d06      	ldr	r5, [pc, #24]	@ (8000bc4 <_close_r+0x1c>)
 8000bac:	2300      	movs	r3, #0
 8000bae:	4604      	mov	r4, r0
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	602b      	str	r3, [r5, #0]
 8000bb4:	f7ff fd51 	bl	800065a <_close>
 8000bb8:	1c43      	adds	r3, r0, #1
 8000bba:	d102      	bne.n	8000bc2 <_close_r+0x1a>
 8000bbc:	682b      	ldr	r3, [r5, #0]
 8000bbe:	b103      	cbz	r3, 8000bc2 <_close_r+0x1a>
 8000bc0:	6023      	str	r3, [r4, #0]
 8000bc2:	bd38      	pop	{r3, r4, r5, pc}
 8000bc4:	200001b8 	.word	0x200001b8

08000bc8 <_lseek_r>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	4d07      	ldr	r5, [pc, #28]	@ (8000be8 <_lseek_r+0x20>)
 8000bcc:	4604      	mov	r4, r0
 8000bce:	4608      	mov	r0, r1
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	602a      	str	r2, [r5, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	f7ff fd66 	bl	80006a8 <_lseek>
 8000bdc:	1c43      	adds	r3, r0, #1
 8000bde:	d102      	bne.n	8000be6 <_lseek_r+0x1e>
 8000be0:	682b      	ldr	r3, [r5, #0]
 8000be2:	b103      	cbz	r3, 8000be6 <_lseek_r+0x1e>
 8000be4:	6023      	str	r3, [r4, #0]
 8000be6:	bd38      	pop	{r3, r4, r5, pc}
 8000be8:	200001b8 	.word	0x200001b8

08000bec <_read_r>:
 8000bec:	b538      	push	{r3, r4, r5, lr}
 8000bee:	4d07      	ldr	r5, [pc, #28]	@ (8000c0c <_read_r+0x20>)
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4608      	mov	r0, r1
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	602a      	str	r2, [r5, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	f7ff fcf4 	bl	80005e8 <_read>
 8000c00:	1c43      	adds	r3, r0, #1
 8000c02:	d102      	bne.n	8000c0a <_read_r+0x1e>
 8000c04:	682b      	ldr	r3, [r5, #0]
 8000c06:	b103      	cbz	r3, 8000c0a <_read_r+0x1e>
 8000c08:	6023      	str	r3, [r4, #0]
 8000c0a:	bd38      	pop	{r3, r4, r5, pc}
 8000c0c:	200001b8 	.word	0x200001b8

08000c10 <_write_r>:
 8000c10:	b538      	push	{r3, r4, r5, lr}
 8000c12:	4d07      	ldr	r5, [pc, #28]	@ (8000c30 <_write_r+0x20>)
 8000c14:	4604      	mov	r4, r0
 8000c16:	4608      	mov	r0, r1
 8000c18:	4611      	mov	r1, r2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	602a      	str	r2, [r5, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	f7ff fcff 	bl	8000622 <_write>
 8000c24:	1c43      	adds	r3, r0, #1
 8000c26:	d102      	bne.n	8000c2e <_write_r+0x1e>
 8000c28:	682b      	ldr	r3, [r5, #0]
 8000c2a:	b103      	cbz	r3, 8000c2e <_write_r+0x1e>
 8000c2c:	6023      	str	r3, [r4, #0]
 8000c2e:	bd38      	pop	{r3, r4, r5, pc}
 8000c30:	200001b8 	.word	0x200001b8

08000c34 <__errno>:
 8000c34:	4b01      	ldr	r3, [pc, #4]	@ (8000c3c <__errno+0x8>)
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	2000000c 	.word	0x2000000c

08000c40 <__libc_init_array>:
 8000c40:	b570      	push	{r4, r5, r6, lr}
 8000c42:	4d0d      	ldr	r5, [pc, #52]	@ (8000c78 <__libc_init_array+0x38>)
 8000c44:	4c0d      	ldr	r4, [pc, #52]	@ (8000c7c <__libc_init_array+0x3c>)
 8000c46:	1b64      	subs	r4, r4, r5
 8000c48:	10a4      	asrs	r4, r4, #2
 8000c4a:	2600      	movs	r6, #0
 8000c4c:	42a6      	cmp	r6, r4
 8000c4e:	d109      	bne.n	8000c64 <__libc_init_array+0x24>
 8000c50:	4d0b      	ldr	r5, [pc, #44]	@ (8000c80 <__libc_init_array+0x40>)
 8000c52:	4c0c      	ldr	r4, [pc, #48]	@ (8000c84 <__libc_init_array+0x44>)
 8000c54:	f000 fd24 	bl	80016a0 <_init>
 8000c58:	1b64      	subs	r4, r4, r5
 8000c5a:	10a4      	asrs	r4, r4, #2
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	42a6      	cmp	r6, r4
 8000c60:	d105      	bne.n	8000c6e <__libc_init_array+0x2e>
 8000c62:	bd70      	pop	{r4, r5, r6, pc}
 8000c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c68:	4798      	blx	r3
 8000c6a:	3601      	adds	r6, #1
 8000c6c:	e7ee      	b.n	8000c4c <__libc_init_array+0xc>
 8000c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c72:	4798      	blx	r3
 8000c74:	3601      	adds	r6, #1
 8000c76:	e7f2      	b.n	8000c5e <__libc_init_array+0x1e>
 8000c78:	0800193c 	.word	0x0800193c
 8000c7c:	0800193c 	.word	0x0800193c
 8000c80:	0800193c 	.word	0x0800193c
 8000c84:	08001940 	.word	0x08001940

08000c88 <__retarget_lock_init_recursive>:
 8000c88:	4770      	bx	lr

08000c8a <__retarget_lock_acquire_recursive>:
 8000c8a:	4770      	bx	lr

08000c8c <__retarget_lock_release_recursive>:
 8000c8c:	4770      	bx	lr
	...

08000c90 <_free_r>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4605      	mov	r5, r0
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d041      	beq.n	8000d1c <_free_r+0x8c>
 8000c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000c9c:	1f0c      	subs	r4, r1, #4
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bfb8      	it	lt
 8000ca2:	18e4      	addlt	r4, r4, r3
 8000ca4:	f000 f8e0 	bl	8000e68 <__malloc_lock>
 8000ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d20 <_free_r+0x90>)
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	b933      	cbnz	r3, 8000cbc <_free_r+0x2c>
 8000cae:	6063      	str	r3, [r4, #4]
 8000cb0:	6014      	str	r4, [r2, #0]
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb8:	f000 b8dc 	b.w	8000e74 <__malloc_unlock>
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	d908      	bls.n	8000cd2 <_free_r+0x42>
 8000cc0:	6820      	ldr	r0, [r4, #0]
 8000cc2:	1821      	adds	r1, r4, r0
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	bf01      	itttt	eq
 8000cc8:	6819      	ldreq	r1, [r3, #0]
 8000cca:	685b      	ldreq	r3, [r3, #4]
 8000ccc:	1809      	addeq	r1, r1, r0
 8000cce:	6021      	streq	r1, [r4, #0]
 8000cd0:	e7ed      	b.n	8000cae <_free_r+0x1e>
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	b10b      	cbz	r3, 8000cdc <_free_r+0x4c>
 8000cd8:	42a3      	cmp	r3, r4
 8000cda:	d9fa      	bls.n	8000cd2 <_free_r+0x42>
 8000cdc:	6811      	ldr	r1, [r2, #0]
 8000cde:	1850      	adds	r0, r2, r1
 8000ce0:	42a0      	cmp	r0, r4
 8000ce2:	d10b      	bne.n	8000cfc <_free_r+0x6c>
 8000ce4:	6820      	ldr	r0, [r4, #0]
 8000ce6:	4401      	add	r1, r0
 8000ce8:	1850      	adds	r0, r2, r1
 8000cea:	4283      	cmp	r3, r0
 8000cec:	6011      	str	r1, [r2, #0]
 8000cee:	d1e0      	bne.n	8000cb2 <_free_r+0x22>
 8000cf0:	6818      	ldr	r0, [r3, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	6053      	str	r3, [r2, #4]
 8000cf6:	4408      	add	r0, r1
 8000cf8:	6010      	str	r0, [r2, #0]
 8000cfa:	e7da      	b.n	8000cb2 <_free_r+0x22>
 8000cfc:	d902      	bls.n	8000d04 <_free_r+0x74>
 8000cfe:	230c      	movs	r3, #12
 8000d00:	602b      	str	r3, [r5, #0]
 8000d02:	e7d6      	b.n	8000cb2 <_free_r+0x22>
 8000d04:	6820      	ldr	r0, [r4, #0]
 8000d06:	1821      	adds	r1, r4, r0
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	bf04      	itt	eq
 8000d0c:	6819      	ldreq	r1, [r3, #0]
 8000d0e:	685b      	ldreq	r3, [r3, #4]
 8000d10:	6063      	str	r3, [r4, #4]
 8000d12:	bf04      	itt	eq
 8000d14:	1809      	addeq	r1, r1, r0
 8000d16:	6021      	streq	r1, [r4, #0]
 8000d18:	6054      	str	r4, [r2, #4]
 8000d1a:	e7ca      	b.n	8000cb2 <_free_r+0x22>
 8000d1c:	bd38      	pop	{r3, r4, r5, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001c4 	.word	0x200001c4

08000d24 <sbrk_aligned>:
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	4e0f      	ldr	r6, [pc, #60]	@ (8000d64 <sbrk_aligned+0x40>)
 8000d28:	460c      	mov	r4, r1
 8000d2a:	6831      	ldr	r1, [r6, #0]
 8000d2c:	4605      	mov	r5, r0
 8000d2e:	b911      	cbnz	r1, 8000d36 <sbrk_aligned+0x12>
 8000d30:	f000 fca6 	bl	8001680 <_sbrk_r>
 8000d34:	6030      	str	r0, [r6, #0]
 8000d36:	4621      	mov	r1, r4
 8000d38:	4628      	mov	r0, r5
 8000d3a:	f000 fca1 	bl	8001680 <_sbrk_r>
 8000d3e:	1c43      	adds	r3, r0, #1
 8000d40:	d103      	bne.n	8000d4a <sbrk_aligned+0x26>
 8000d42:	f04f 34ff 	mov.w	r4, #4294967295
 8000d46:	4620      	mov	r0, r4
 8000d48:	bd70      	pop	{r4, r5, r6, pc}
 8000d4a:	1cc4      	adds	r4, r0, #3
 8000d4c:	f024 0403 	bic.w	r4, r4, #3
 8000d50:	42a0      	cmp	r0, r4
 8000d52:	d0f8      	beq.n	8000d46 <sbrk_aligned+0x22>
 8000d54:	1a21      	subs	r1, r4, r0
 8000d56:	4628      	mov	r0, r5
 8000d58:	f000 fc92 	bl	8001680 <_sbrk_r>
 8000d5c:	3001      	adds	r0, #1
 8000d5e:	d1f2      	bne.n	8000d46 <sbrk_aligned+0x22>
 8000d60:	e7ef      	b.n	8000d42 <sbrk_aligned+0x1e>
 8000d62:	bf00      	nop
 8000d64:	200001c0 	.word	0x200001c0

08000d68 <_malloc_r>:
 8000d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d6c:	1ccd      	adds	r5, r1, #3
 8000d6e:	f025 0503 	bic.w	r5, r5, #3
 8000d72:	3508      	adds	r5, #8
 8000d74:	2d0c      	cmp	r5, #12
 8000d76:	bf38      	it	cc
 8000d78:	250c      	movcc	r5, #12
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	4606      	mov	r6, r0
 8000d7e:	db01      	blt.n	8000d84 <_malloc_r+0x1c>
 8000d80:	42a9      	cmp	r1, r5
 8000d82:	d904      	bls.n	8000d8e <_malloc_r+0x26>
 8000d84:	230c      	movs	r3, #12
 8000d86:	6033      	str	r3, [r6, #0]
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e64 <_malloc_r+0xfc>
 8000d92:	f000 f869 	bl	8000e68 <__malloc_lock>
 8000d96:	f8d8 3000 	ldr.w	r3, [r8]
 8000d9a:	461c      	mov	r4, r3
 8000d9c:	bb44      	cbnz	r4, 8000df0 <_malloc_r+0x88>
 8000d9e:	4629      	mov	r1, r5
 8000da0:	4630      	mov	r0, r6
 8000da2:	f7ff ffbf 	bl	8000d24 <sbrk_aligned>
 8000da6:	1c43      	adds	r3, r0, #1
 8000da8:	4604      	mov	r4, r0
 8000daa:	d158      	bne.n	8000e5e <_malloc_r+0xf6>
 8000dac:	f8d8 4000 	ldr.w	r4, [r8]
 8000db0:	4627      	mov	r7, r4
 8000db2:	2f00      	cmp	r7, #0
 8000db4:	d143      	bne.n	8000e3e <_malloc_r+0xd6>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d04b      	beq.n	8000e52 <_malloc_r+0xea>
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	eb04 0903 	add.w	r9, r4, r3
 8000dc4:	f000 fc5c 	bl	8001680 <_sbrk_r>
 8000dc8:	4581      	cmp	r9, r0
 8000dca:	d142      	bne.n	8000e52 <_malloc_r+0xea>
 8000dcc:	6821      	ldr	r1, [r4, #0]
 8000dce:	1a6d      	subs	r5, r5, r1
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	f7ff ffa6 	bl	8000d24 <sbrk_aligned>
 8000dd8:	3001      	adds	r0, #1
 8000dda:	d03a      	beq.n	8000e52 <_malloc_r+0xea>
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	442b      	add	r3, r5
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	f8d8 3000 	ldr.w	r3, [r8]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	bb62      	cbnz	r2, 8000e44 <_malloc_r+0xdc>
 8000dea:	f8c8 7000 	str.w	r7, [r8]
 8000dee:	e00f      	b.n	8000e10 <_malloc_r+0xa8>
 8000df0:	6822      	ldr	r2, [r4, #0]
 8000df2:	1b52      	subs	r2, r2, r5
 8000df4:	d420      	bmi.n	8000e38 <_malloc_r+0xd0>
 8000df6:	2a0b      	cmp	r2, #11
 8000df8:	d917      	bls.n	8000e2a <_malloc_r+0xc2>
 8000dfa:	1961      	adds	r1, r4, r5
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	6025      	str	r5, [r4, #0]
 8000e00:	bf18      	it	ne
 8000e02:	6059      	strne	r1, [r3, #4]
 8000e04:	6863      	ldr	r3, [r4, #4]
 8000e06:	bf08      	it	eq
 8000e08:	f8c8 1000 	streq.w	r1, [r8]
 8000e0c:	5162      	str	r2, [r4, r5]
 8000e0e:	604b      	str	r3, [r1, #4]
 8000e10:	4630      	mov	r0, r6
 8000e12:	f000 f82f 	bl	8000e74 <__malloc_unlock>
 8000e16:	f104 000b 	add.w	r0, r4, #11
 8000e1a:	1d23      	adds	r3, r4, #4
 8000e1c:	f020 0007 	bic.w	r0, r0, #7
 8000e20:	1ac2      	subs	r2, r0, r3
 8000e22:	bf1c      	itt	ne
 8000e24:	1a1b      	subne	r3, r3, r0
 8000e26:	50a3      	strne	r3, [r4, r2]
 8000e28:	e7af      	b.n	8000d8a <_malloc_r+0x22>
 8000e2a:	6862      	ldr	r2, [r4, #4]
 8000e2c:	42a3      	cmp	r3, r4
 8000e2e:	bf0c      	ite	eq
 8000e30:	f8c8 2000 	streq.w	r2, [r8]
 8000e34:	605a      	strne	r2, [r3, #4]
 8000e36:	e7eb      	b.n	8000e10 <_malloc_r+0xa8>
 8000e38:	4623      	mov	r3, r4
 8000e3a:	6864      	ldr	r4, [r4, #4]
 8000e3c:	e7ae      	b.n	8000d9c <_malloc_r+0x34>
 8000e3e:	463c      	mov	r4, r7
 8000e40:	687f      	ldr	r7, [r7, #4]
 8000e42:	e7b6      	b.n	8000db2 <_malloc_r+0x4a>
 8000e44:	461a      	mov	r2, r3
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d1fb      	bne.n	8000e44 <_malloc_r+0xdc>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	6053      	str	r3, [r2, #4]
 8000e50:	e7de      	b.n	8000e10 <_malloc_r+0xa8>
 8000e52:	230c      	movs	r3, #12
 8000e54:	6033      	str	r3, [r6, #0]
 8000e56:	4630      	mov	r0, r6
 8000e58:	f000 f80c 	bl	8000e74 <__malloc_unlock>
 8000e5c:	e794      	b.n	8000d88 <_malloc_r+0x20>
 8000e5e:	6005      	str	r5, [r0, #0]
 8000e60:	e7d6      	b.n	8000e10 <_malloc_r+0xa8>
 8000e62:	bf00      	nop
 8000e64:	200001c4 	.word	0x200001c4

08000e68 <__malloc_lock>:
 8000e68:	4801      	ldr	r0, [pc, #4]	@ (8000e70 <__malloc_lock+0x8>)
 8000e6a:	f7ff bf0e 	b.w	8000c8a <__retarget_lock_acquire_recursive>
 8000e6e:	bf00      	nop
 8000e70:	200001bc 	.word	0x200001bc

08000e74 <__malloc_unlock>:
 8000e74:	4801      	ldr	r0, [pc, #4]	@ (8000e7c <__malloc_unlock+0x8>)
 8000e76:	f7ff bf09 	b.w	8000c8c <__retarget_lock_release_recursive>
 8000e7a:	bf00      	nop
 8000e7c:	200001bc 	.word	0x200001bc

08000e80 <__sfputc_r>:
 8000e80:	6893      	ldr	r3, [r2, #8]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	b410      	push	{r4}
 8000e88:	6093      	str	r3, [r2, #8]
 8000e8a:	da08      	bge.n	8000e9e <__sfputc_r+0x1e>
 8000e8c:	6994      	ldr	r4, [r2, #24]
 8000e8e:	42a3      	cmp	r3, r4
 8000e90:	db01      	blt.n	8000e96 <__sfputc_r+0x16>
 8000e92:	290a      	cmp	r1, #10
 8000e94:	d103      	bne.n	8000e9e <__sfputc_r+0x1e>
 8000e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e9a:	f7ff bde8 	b.w	8000a6e <__swbuf_r>
 8000e9e:	6813      	ldr	r3, [r2, #0]
 8000ea0:	1c58      	adds	r0, r3, #1
 8000ea2:	6010      	str	r0, [r2, #0]
 8000ea4:	7019      	strb	r1, [r3, #0]
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <__sfputs_r>:
 8000eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	460f      	mov	r7, r1
 8000eb4:	4614      	mov	r4, r2
 8000eb6:	18d5      	adds	r5, r2, r3
 8000eb8:	42ac      	cmp	r4, r5
 8000eba:	d101      	bne.n	8000ec0 <__sfputs_r+0x12>
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	e007      	b.n	8000ed0 <__sfputs_r+0x22>
 8000ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ec4:	463a      	mov	r2, r7
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f7ff ffda 	bl	8000e80 <__sfputc_r>
 8000ecc:	1c43      	adds	r3, r0, #1
 8000ece:	d1f3      	bne.n	8000eb8 <__sfputs_r+0xa>
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ed4 <_vfiprintf_r>:
 8000ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed8:	460d      	mov	r5, r1
 8000eda:	b09d      	sub	sp, #116	@ 0x74
 8000edc:	4614      	mov	r4, r2
 8000ede:	4698      	mov	r8, r3
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	b118      	cbz	r0, 8000eec <_vfiprintf_r+0x18>
 8000ee4:	6a03      	ldr	r3, [r0, #32]
 8000ee6:	b90b      	cbnz	r3, 8000eec <_vfiprintf_r+0x18>
 8000ee8:	f7ff fcd8 	bl	800089c <__sinit>
 8000eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000eee:	07d9      	lsls	r1, r3, #31
 8000ef0:	d405      	bmi.n	8000efe <_vfiprintf_r+0x2a>
 8000ef2:	89ab      	ldrh	r3, [r5, #12]
 8000ef4:	059a      	lsls	r2, r3, #22
 8000ef6:	d402      	bmi.n	8000efe <_vfiprintf_r+0x2a>
 8000ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000efa:	f7ff fec6 	bl	8000c8a <__retarget_lock_acquire_recursive>
 8000efe:	89ab      	ldrh	r3, [r5, #12]
 8000f00:	071b      	lsls	r3, r3, #28
 8000f02:	d501      	bpl.n	8000f08 <_vfiprintf_r+0x34>
 8000f04:	692b      	ldr	r3, [r5, #16]
 8000f06:	b99b      	cbnz	r3, 8000f30 <_vfiprintf_r+0x5c>
 8000f08:	4629      	mov	r1, r5
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	f7ff fdee 	bl	8000aec <__swsetup_r>
 8000f10:	b170      	cbz	r0, 8000f30 <_vfiprintf_r+0x5c>
 8000f12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f14:	07dc      	lsls	r4, r3, #31
 8000f16:	d504      	bpl.n	8000f22 <_vfiprintf_r+0x4e>
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	b01d      	add	sp, #116	@ 0x74
 8000f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f22:	89ab      	ldrh	r3, [r5, #12]
 8000f24:	0598      	lsls	r0, r3, #22
 8000f26:	d4f7      	bmi.n	8000f18 <_vfiprintf_r+0x44>
 8000f28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f2a:	f7ff feaf 	bl	8000c8c <__retarget_lock_release_recursive>
 8000f2e:	e7f3      	b.n	8000f18 <_vfiprintf_r+0x44>
 8000f30:	2300      	movs	r3, #0
 8000f32:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f34:	2320      	movs	r3, #32
 8000f36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f3e:	2330      	movs	r3, #48	@ 0x30
 8000f40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80010f0 <_vfiprintf_r+0x21c>
 8000f44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000f48:	f04f 0901 	mov.w	r9, #1
 8000f4c:	4623      	mov	r3, r4
 8000f4e:	469a      	mov	sl, r3
 8000f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f54:	b10a      	cbz	r2, 8000f5a <_vfiprintf_r+0x86>
 8000f56:	2a25      	cmp	r2, #37	@ 0x25
 8000f58:	d1f9      	bne.n	8000f4e <_vfiprintf_r+0x7a>
 8000f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8000f5e:	d00b      	beq.n	8000f78 <_vfiprintf_r+0xa4>
 8000f60:	465b      	mov	r3, fp
 8000f62:	4622      	mov	r2, r4
 8000f64:	4629      	mov	r1, r5
 8000f66:	4630      	mov	r0, r6
 8000f68:	f7ff ffa1 	bl	8000eae <__sfputs_r>
 8000f6c:	3001      	adds	r0, #1
 8000f6e:	f000 80a7 	beq.w	80010c0 <_vfiprintf_r+0x1ec>
 8000f72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000f74:	445a      	add	r2, fp
 8000f76:	9209      	str	r2, [sp, #36]	@ 0x24
 8000f78:	f89a 3000 	ldrb.w	r3, [sl]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 809f 	beq.w	80010c0 <_vfiprintf_r+0x1ec>
 8000f82:	2300      	movs	r3, #0
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f8c:	f10a 0a01 	add.w	sl, sl, #1
 8000f90:	9304      	str	r3, [sp, #16]
 8000f92:	9307      	str	r3, [sp, #28]
 8000f94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000f98:	931a      	str	r3, [sp, #104]	@ 0x68
 8000f9a:	4654      	mov	r4, sl
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fa2:	4853      	ldr	r0, [pc, #332]	@ (80010f0 <_vfiprintf_r+0x21c>)
 8000fa4:	f7ff f91c 	bl	80001e0 <memchr>
 8000fa8:	9a04      	ldr	r2, [sp, #16]
 8000faa:	b9d8      	cbnz	r0, 8000fe4 <_vfiprintf_r+0x110>
 8000fac:	06d1      	lsls	r1, r2, #27
 8000fae:	bf44      	itt	mi
 8000fb0:	2320      	movmi	r3, #32
 8000fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000fb6:	0713      	lsls	r3, r2, #28
 8000fb8:	bf44      	itt	mi
 8000fba:	232b      	movmi	r3, #43	@ 0x2b
 8000fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8000fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000fc6:	d015      	beq.n	8000ff4 <_vfiprintf_r+0x120>
 8000fc8:	9a07      	ldr	r2, [sp, #28]
 8000fca:	4654      	mov	r4, sl
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f04f 0c0a 	mov.w	ip, #10
 8000fd2:	4621      	mov	r1, r4
 8000fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fd8:	3b30      	subs	r3, #48	@ 0x30
 8000fda:	2b09      	cmp	r3, #9
 8000fdc:	d94b      	bls.n	8001076 <_vfiprintf_r+0x1a2>
 8000fde:	b1b0      	cbz	r0, 800100e <_vfiprintf_r+0x13a>
 8000fe0:	9207      	str	r2, [sp, #28]
 8000fe2:	e014      	b.n	800100e <_vfiprintf_r+0x13a>
 8000fe4:	eba0 0308 	sub.w	r3, r0, r8
 8000fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8000fec:	4313      	orrs	r3, r2
 8000fee:	9304      	str	r3, [sp, #16]
 8000ff0:	46a2      	mov	sl, r4
 8000ff2:	e7d2      	b.n	8000f9a <_vfiprintf_r+0xc6>
 8000ff4:	9b03      	ldr	r3, [sp, #12]
 8000ff6:	1d19      	adds	r1, r3, #4
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	9103      	str	r1, [sp, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bfbb      	ittet	lt
 8001000:	425b      	neglt	r3, r3
 8001002:	f042 0202 	orrlt.w	r2, r2, #2
 8001006:	9307      	strge	r3, [sp, #28]
 8001008:	9307      	strlt	r3, [sp, #28]
 800100a:	bfb8      	it	lt
 800100c:	9204      	strlt	r2, [sp, #16]
 800100e:	7823      	ldrb	r3, [r4, #0]
 8001010:	2b2e      	cmp	r3, #46	@ 0x2e
 8001012:	d10a      	bne.n	800102a <_vfiprintf_r+0x156>
 8001014:	7863      	ldrb	r3, [r4, #1]
 8001016:	2b2a      	cmp	r3, #42	@ 0x2a
 8001018:	d132      	bne.n	8001080 <_vfiprintf_r+0x1ac>
 800101a:	9b03      	ldr	r3, [sp, #12]
 800101c:	1d1a      	adds	r2, r3, #4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	9203      	str	r2, [sp, #12]
 8001022:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001026:	3402      	adds	r4, #2
 8001028:	9305      	str	r3, [sp, #20]
 800102a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001100 <_vfiprintf_r+0x22c>
 800102e:	7821      	ldrb	r1, [r4, #0]
 8001030:	2203      	movs	r2, #3
 8001032:	4650      	mov	r0, sl
 8001034:	f7ff f8d4 	bl	80001e0 <memchr>
 8001038:	b138      	cbz	r0, 800104a <_vfiprintf_r+0x176>
 800103a:	9b04      	ldr	r3, [sp, #16]
 800103c:	eba0 000a 	sub.w	r0, r0, sl
 8001040:	2240      	movs	r2, #64	@ 0x40
 8001042:	4082      	lsls	r2, r0
 8001044:	4313      	orrs	r3, r2
 8001046:	3401      	adds	r4, #1
 8001048:	9304      	str	r3, [sp, #16]
 800104a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800104e:	4829      	ldr	r0, [pc, #164]	@ (80010f4 <_vfiprintf_r+0x220>)
 8001050:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001054:	2206      	movs	r2, #6
 8001056:	f7ff f8c3 	bl	80001e0 <memchr>
 800105a:	2800      	cmp	r0, #0
 800105c:	d03f      	beq.n	80010de <_vfiprintf_r+0x20a>
 800105e:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <_vfiprintf_r+0x224>)
 8001060:	bb1b      	cbnz	r3, 80010aa <_vfiprintf_r+0x1d6>
 8001062:	9b03      	ldr	r3, [sp, #12]
 8001064:	3307      	adds	r3, #7
 8001066:	f023 0307 	bic.w	r3, r3, #7
 800106a:	3308      	adds	r3, #8
 800106c:	9303      	str	r3, [sp, #12]
 800106e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001070:	443b      	add	r3, r7
 8001072:	9309      	str	r3, [sp, #36]	@ 0x24
 8001074:	e76a      	b.n	8000f4c <_vfiprintf_r+0x78>
 8001076:	fb0c 3202 	mla	r2, ip, r2, r3
 800107a:	460c      	mov	r4, r1
 800107c:	2001      	movs	r0, #1
 800107e:	e7a8      	b.n	8000fd2 <_vfiprintf_r+0xfe>
 8001080:	2300      	movs	r3, #0
 8001082:	3401      	adds	r4, #1
 8001084:	9305      	str	r3, [sp, #20]
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 0c0a 	mov.w	ip, #10
 800108c:	4620      	mov	r0, r4
 800108e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001092:	3a30      	subs	r2, #48	@ 0x30
 8001094:	2a09      	cmp	r2, #9
 8001096:	d903      	bls.n	80010a0 <_vfiprintf_r+0x1cc>
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0c6      	beq.n	800102a <_vfiprintf_r+0x156>
 800109c:	9105      	str	r1, [sp, #20]
 800109e:	e7c4      	b.n	800102a <_vfiprintf_r+0x156>
 80010a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80010a4:	4604      	mov	r4, r0
 80010a6:	2301      	movs	r3, #1
 80010a8:	e7f0      	b.n	800108c <_vfiprintf_r+0x1b8>
 80010aa:	ab03      	add	r3, sp, #12
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	462a      	mov	r2, r5
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <_vfiprintf_r+0x228>)
 80010b2:	a904      	add	r1, sp, #16
 80010b4:	4630      	mov	r0, r6
 80010b6:	f3af 8000 	nop.w
 80010ba:	4607      	mov	r7, r0
 80010bc:	1c78      	adds	r0, r7, #1
 80010be:	d1d6      	bne.n	800106e <_vfiprintf_r+0x19a>
 80010c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80010c2:	07d9      	lsls	r1, r3, #31
 80010c4:	d405      	bmi.n	80010d2 <_vfiprintf_r+0x1fe>
 80010c6:	89ab      	ldrh	r3, [r5, #12]
 80010c8:	059a      	lsls	r2, r3, #22
 80010ca:	d402      	bmi.n	80010d2 <_vfiprintf_r+0x1fe>
 80010cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80010ce:	f7ff fddd 	bl	8000c8c <__retarget_lock_release_recursive>
 80010d2:	89ab      	ldrh	r3, [r5, #12]
 80010d4:	065b      	lsls	r3, r3, #25
 80010d6:	f53f af1f 	bmi.w	8000f18 <_vfiprintf_r+0x44>
 80010da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80010dc:	e71e      	b.n	8000f1c <_vfiprintf_r+0x48>
 80010de:	ab03      	add	r3, sp, #12
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	462a      	mov	r2, r5
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <_vfiprintf_r+0x228>)
 80010e6:	a904      	add	r1, sp, #16
 80010e8:	4630      	mov	r0, r6
 80010ea:	f000 f879 	bl	80011e0 <_printf_i>
 80010ee:	e7e4      	b.n	80010ba <_vfiprintf_r+0x1e6>
 80010f0:	080018ff 	.word	0x080018ff
 80010f4:	08001909 	.word	0x08001909
 80010f8:	00000000 	.word	0x00000000
 80010fc:	08000eaf 	.word	0x08000eaf
 8001100:	08001905 	.word	0x08001905

08001104 <_printf_common>:
 8001104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001108:	4616      	mov	r6, r2
 800110a:	4698      	mov	r8, r3
 800110c:	688a      	ldr	r2, [r1, #8]
 800110e:	690b      	ldr	r3, [r1, #16]
 8001110:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001114:	4293      	cmp	r3, r2
 8001116:	bfb8      	it	lt
 8001118:	4613      	movlt	r3, r2
 800111a:	6033      	str	r3, [r6, #0]
 800111c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001120:	4607      	mov	r7, r0
 8001122:	460c      	mov	r4, r1
 8001124:	b10a      	cbz	r2, 800112a <_printf_common+0x26>
 8001126:	3301      	adds	r3, #1
 8001128:	6033      	str	r3, [r6, #0]
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	0699      	lsls	r1, r3, #26
 800112e:	bf42      	ittt	mi
 8001130:	6833      	ldrmi	r3, [r6, #0]
 8001132:	3302      	addmi	r3, #2
 8001134:	6033      	strmi	r3, [r6, #0]
 8001136:	6825      	ldr	r5, [r4, #0]
 8001138:	f015 0506 	ands.w	r5, r5, #6
 800113c:	d106      	bne.n	800114c <_printf_common+0x48>
 800113e:	f104 0a19 	add.w	sl, r4, #25
 8001142:	68e3      	ldr	r3, [r4, #12]
 8001144:	6832      	ldr	r2, [r6, #0]
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	42ab      	cmp	r3, r5
 800114a:	dc26      	bgt.n	800119a <_printf_common+0x96>
 800114c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	3b00      	subs	r3, #0
 8001154:	bf18      	it	ne
 8001156:	2301      	movne	r3, #1
 8001158:	0692      	lsls	r2, r2, #26
 800115a:	d42b      	bmi.n	80011b4 <_printf_common+0xb0>
 800115c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001160:	4641      	mov	r1, r8
 8001162:	4638      	mov	r0, r7
 8001164:	47c8      	blx	r9
 8001166:	3001      	adds	r0, #1
 8001168:	d01e      	beq.n	80011a8 <_printf_common+0xa4>
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	6922      	ldr	r2, [r4, #16]
 800116e:	f003 0306 	and.w	r3, r3, #6
 8001172:	2b04      	cmp	r3, #4
 8001174:	bf02      	ittt	eq
 8001176:	68e5      	ldreq	r5, [r4, #12]
 8001178:	6833      	ldreq	r3, [r6, #0]
 800117a:	1aed      	subeq	r5, r5, r3
 800117c:	68a3      	ldr	r3, [r4, #8]
 800117e:	bf0c      	ite	eq
 8001180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001184:	2500      	movne	r5, #0
 8001186:	4293      	cmp	r3, r2
 8001188:	bfc4      	itt	gt
 800118a:	1a9b      	subgt	r3, r3, r2
 800118c:	18ed      	addgt	r5, r5, r3
 800118e:	2600      	movs	r6, #0
 8001190:	341a      	adds	r4, #26
 8001192:	42b5      	cmp	r5, r6
 8001194:	d11a      	bne.n	80011cc <_printf_common+0xc8>
 8001196:	2000      	movs	r0, #0
 8001198:	e008      	b.n	80011ac <_printf_common+0xa8>
 800119a:	2301      	movs	r3, #1
 800119c:	4652      	mov	r2, sl
 800119e:	4641      	mov	r1, r8
 80011a0:	4638      	mov	r0, r7
 80011a2:	47c8      	blx	r9
 80011a4:	3001      	adds	r0, #1
 80011a6:	d103      	bne.n	80011b0 <_printf_common+0xac>
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b0:	3501      	adds	r5, #1
 80011b2:	e7c6      	b.n	8001142 <_printf_common+0x3e>
 80011b4:	18e1      	adds	r1, r4, r3
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	2030      	movs	r0, #48	@ 0x30
 80011ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80011be:	4422      	add	r2, r4
 80011c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80011c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80011c8:	3302      	adds	r3, #2
 80011ca:	e7c7      	b.n	800115c <_printf_common+0x58>
 80011cc:	2301      	movs	r3, #1
 80011ce:	4622      	mov	r2, r4
 80011d0:	4641      	mov	r1, r8
 80011d2:	4638      	mov	r0, r7
 80011d4:	47c8      	blx	r9
 80011d6:	3001      	adds	r0, #1
 80011d8:	d0e6      	beq.n	80011a8 <_printf_common+0xa4>
 80011da:	3601      	adds	r6, #1
 80011dc:	e7d9      	b.n	8001192 <_printf_common+0x8e>
	...

080011e0 <_printf_i>:
 80011e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011e4:	7e0f      	ldrb	r7, [r1, #24]
 80011e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80011e8:	2f78      	cmp	r7, #120	@ 0x78
 80011ea:	4691      	mov	r9, r2
 80011ec:	4680      	mov	r8, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	469a      	mov	sl, r3
 80011f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80011f6:	d807      	bhi.n	8001208 <_printf_i+0x28>
 80011f8:	2f62      	cmp	r7, #98	@ 0x62
 80011fa:	d80a      	bhi.n	8001212 <_printf_i+0x32>
 80011fc:	2f00      	cmp	r7, #0
 80011fe:	f000 80d2 	beq.w	80013a6 <_printf_i+0x1c6>
 8001202:	2f58      	cmp	r7, #88	@ 0x58
 8001204:	f000 80b9 	beq.w	800137a <_printf_i+0x19a>
 8001208:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800120c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001210:	e03a      	b.n	8001288 <_printf_i+0xa8>
 8001212:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001216:	2b15      	cmp	r3, #21
 8001218:	d8f6      	bhi.n	8001208 <_printf_i+0x28>
 800121a:	a101      	add	r1, pc, #4	@ (adr r1, 8001220 <_printf_i+0x40>)
 800121c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001220:	08001279 	.word	0x08001279
 8001224:	0800128d 	.word	0x0800128d
 8001228:	08001209 	.word	0x08001209
 800122c:	08001209 	.word	0x08001209
 8001230:	08001209 	.word	0x08001209
 8001234:	08001209 	.word	0x08001209
 8001238:	0800128d 	.word	0x0800128d
 800123c:	08001209 	.word	0x08001209
 8001240:	08001209 	.word	0x08001209
 8001244:	08001209 	.word	0x08001209
 8001248:	08001209 	.word	0x08001209
 800124c:	0800138d 	.word	0x0800138d
 8001250:	080012b7 	.word	0x080012b7
 8001254:	08001347 	.word	0x08001347
 8001258:	08001209 	.word	0x08001209
 800125c:	08001209 	.word	0x08001209
 8001260:	080013af 	.word	0x080013af
 8001264:	08001209 	.word	0x08001209
 8001268:	080012b7 	.word	0x080012b7
 800126c:	08001209 	.word	0x08001209
 8001270:	08001209 	.word	0x08001209
 8001274:	0800134f 	.word	0x0800134f
 8001278:	6833      	ldr	r3, [r6, #0]
 800127a:	1d1a      	adds	r2, r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6032      	str	r2, [r6, #0]
 8001280:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001284:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001288:	2301      	movs	r3, #1
 800128a:	e09d      	b.n	80013c8 <_printf_i+0x1e8>
 800128c:	6833      	ldr	r3, [r6, #0]
 800128e:	6820      	ldr	r0, [r4, #0]
 8001290:	1d19      	adds	r1, r3, #4
 8001292:	6031      	str	r1, [r6, #0]
 8001294:	0606      	lsls	r6, r0, #24
 8001296:	d501      	bpl.n	800129c <_printf_i+0xbc>
 8001298:	681d      	ldr	r5, [r3, #0]
 800129a:	e003      	b.n	80012a4 <_printf_i+0xc4>
 800129c:	0645      	lsls	r5, r0, #25
 800129e:	d5fb      	bpl.n	8001298 <_printf_i+0xb8>
 80012a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80012a4:	2d00      	cmp	r5, #0
 80012a6:	da03      	bge.n	80012b0 <_printf_i+0xd0>
 80012a8:	232d      	movs	r3, #45	@ 0x2d
 80012aa:	426d      	negs	r5, r5
 80012ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012b0:	4859      	ldr	r0, [pc, #356]	@ (8001418 <_printf_i+0x238>)
 80012b2:	230a      	movs	r3, #10
 80012b4:	e011      	b.n	80012da <_printf_i+0xfa>
 80012b6:	6821      	ldr	r1, [r4, #0]
 80012b8:	6833      	ldr	r3, [r6, #0]
 80012ba:	0608      	lsls	r0, r1, #24
 80012bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80012c0:	d402      	bmi.n	80012c8 <_printf_i+0xe8>
 80012c2:	0649      	lsls	r1, r1, #25
 80012c4:	bf48      	it	mi
 80012c6:	b2ad      	uxthmi	r5, r5
 80012c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80012ca:	4853      	ldr	r0, [pc, #332]	@ (8001418 <_printf_i+0x238>)
 80012cc:	6033      	str	r3, [r6, #0]
 80012ce:	bf14      	ite	ne
 80012d0:	230a      	movne	r3, #10
 80012d2:	2308      	moveq	r3, #8
 80012d4:	2100      	movs	r1, #0
 80012d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80012da:	6866      	ldr	r6, [r4, #4]
 80012dc:	60a6      	str	r6, [r4, #8]
 80012de:	2e00      	cmp	r6, #0
 80012e0:	bfa2      	ittt	ge
 80012e2:	6821      	ldrge	r1, [r4, #0]
 80012e4:	f021 0104 	bicge.w	r1, r1, #4
 80012e8:	6021      	strge	r1, [r4, #0]
 80012ea:	b90d      	cbnz	r5, 80012f0 <_printf_i+0x110>
 80012ec:	2e00      	cmp	r6, #0
 80012ee:	d04b      	beq.n	8001388 <_printf_i+0x1a8>
 80012f0:	4616      	mov	r6, r2
 80012f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80012f6:	fb03 5711 	mls	r7, r3, r1, r5
 80012fa:	5dc7      	ldrb	r7, [r0, r7]
 80012fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001300:	462f      	mov	r7, r5
 8001302:	42bb      	cmp	r3, r7
 8001304:	460d      	mov	r5, r1
 8001306:	d9f4      	bls.n	80012f2 <_printf_i+0x112>
 8001308:	2b08      	cmp	r3, #8
 800130a:	d10b      	bne.n	8001324 <_printf_i+0x144>
 800130c:	6823      	ldr	r3, [r4, #0]
 800130e:	07df      	lsls	r7, r3, #31
 8001310:	d508      	bpl.n	8001324 <_printf_i+0x144>
 8001312:	6923      	ldr	r3, [r4, #16]
 8001314:	6861      	ldr	r1, [r4, #4]
 8001316:	4299      	cmp	r1, r3
 8001318:	bfde      	ittt	le
 800131a:	2330      	movle	r3, #48	@ 0x30
 800131c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001320:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001324:	1b92      	subs	r2, r2, r6
 8001326:	6122      	str	r2, [r4, #16]
 8001328:	f8cd a000 	str.w	sl, [sp]
 800132c:	464b      	mov	r3, r9
 800132e:	aa03      	add	r2, sp, #12
 8001330:	4621      	mov	r1, r4
 8001332:	4640      	mov	r0, r8
 8001334:	f7ff fee6 	bl	8001104 <_printf_common>
 8001338:	3001      	adds	r0, #1
 800133a:	d14a      	bne.n	80013d2 <_printf_i+0x1f2>
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	b004      	add	sp, #16
 8001342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	f043 0320 	orr.w	r3, r3, #32
 800134c:	6023      	str	r3, [r4, #0]
 800134e:	4833      	ldr	r0, [pc, #204]	@ (800141c <_printf_i+0x23c>)
 8001350:	2778      	movs	r7, #120	@ 0x78
 8001352:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	6831      	ldr	r1, [r6, #0]
 800135a:	061f      	lsls	r7, r3, #24
 800135c:	f851 5b04 	ldr.w	r5, [r1], #4
 8001360:	d402      	bmi.n	8001368 <_printf_i+0x188>
 8001362:	065f      	lsls	r7, r3, #25
 8001364:	bf48      	it	mi
 8001366:	b2ad      	uxthmi	r5, r5
 8001368:	6031      	str	r1, [r6, #0]
 800136a:	07d9      	lsls	r1, r3, #31
 800136c:	bf44      	itt	mi
 800136e:	f043 0320 	orrmi.w	r3, r3, #32
 8001372:	6023      	strmi	r3, [r4, #0]
 8001374:	b11d      	cbz	r5, 800137e <_printf_i+0x19e>
 8001376:	2310      	movs	r3, #16
 8001378:	e7ac      	b.n	80012d4 <_printf_i+0xf4>
 800137a:	4827      	ldr	r0, [pc, #156]	@ (8001418 <_printf_i+0x238>)
 800137c:	e7e9      	b.n	8001352 <_printf_i+0x172>
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	f023 0320 	bic.w	r3, r3, #32
 8001384:	6023      	str	r3, [r4, #0]
 8001386:	e7f6      	b.n	8001376 <_printf_i+0x196>
 8001388:	4616      	mov	r6, r2
 800138a:	e7bd      	b.n	8001308 <_printf_i+0x128>
 800138c:	6833      	ldr	r3, [r6, #0]
 800138e:	6825      	ldr	r5, [r4, #0]
 8001390:	6961      	ldr	r1, [r4, #20]
 8001392:	1d18      	adds	r0, r3, #4
 8001394:	6030      	str	r0, [r6, #0]
 8001396:	062e      	lsls	r6, r5, #24
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	d501      	bpl.n	80013a0 <_printf_i+0x1c0>
 800139c:	6019      	str	r1, [r3, #0]
 800139e:	e002      	b.n	80013a6 <_printf_i+0x1c6>
 80013a0:	0668      	lsls	r0, r5, #25
 80013a2:	d5fb      	bpl.n	800139c <_printf_i+0x1bc>
 80013a4:	8019      	strh	r1, [r3, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	6123      	str	r3, [r4, #16]
 80013aa:	4616      	mov	r6, r2
 80013ac:	e7bc      	b.n	8001328 <_printf_i+0x148>
 80013ae:	6833      	ldr	r3, [r6, #0]
 80013b0:	1d1a      	adds	r2, r3, #4
 80013b2:	6032      	str	r2, [r6, #0]
 80013b4:	681e      	ldr	r6, [r3, #0]
 80013b6:	6862      	ldr	r2, [r4, #4]
 80013b8:	2100      	movs	r1, #0
 80013ba:	4630      	mov	r0, r6
 80013bc:	f7fe ff10 	bl	80001e0 <memchr>
 80013c0:	b108      	cbz	r0, 80013c6 <_printf_i+0x1e6>
 80013c2:	1b80      	subs	r0, r0, r6
 80013c4:	6060      	str	r0, [r4, #4]
 80013c6:	6863      	ldr	r3, [r4, #4]
 80013c8:	6123      	str	r3, [r4, #16]
 80013ca:	2300      	movs	r3, #0
 80013cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80013d0:	e7aa      	b.n	8001328 <_printf_i+0x148>
 80013d2:	6923      	ldr	r3, [r4, #16]
 80013d4:	4632      	mov	r2, r6
 80013d6:	4649      	mov	r1, r9
 80013d8:	4640      	mov	r0, r8
 80013da:	47d0      	blx	sl
 80013dc:	3001      	adds	r0, #1
 80013de:	d0ad      	beq.n	800133c <_printf_i+0x15c>
 80013e0:	6823      	ldr	r3, [r4, #0]
 80013e2:	079b      	lsls	r3, r3, #30
 80013e4:	d413      	bmi.n	800140e <_printf_i+0x22e>
 80013e6:	68e0      	ldr	r0, [r4, #12]
 80013e8:	9b03      	ldr	r3, [sp, #12]
 80013ea:	4298      	cmp	r0, r3
 80013ec:	bfb8      	it	lt
 80013ee:	4618      	movlt	r0, r3
 80013f0:	e7a6      	b.n	8001340 <_printf_i+0x160>
 80013f2:	2301      	movs	r3, #1
 80013f4:	4632      	mov	r2, r6
 80013f6:	4649      	mov	r1, r9
 80013f8:	4640      	mov	r0, r8
 80013fa:	47d0      	blx	sl
 80013fc:	3001      	adds	r0, #1
 80013fe:	d09d      	beq.n	800133c <_printf_i+0x15c>
 8001400:	3501      	adds	r5, #1
 8001402:	68e3      	ldr	r3, [r4, #12]
 8001404:	9903      	ldr	r1, [sp, #12]
 8001406:	1a5b      	subs	r3, r3, r1
 8001408:	42ab      	cmp	r3, r5
 800140a:	dcf2      	bgt.n	80013f2 <_printf_i+0x212>
 800140c:	e7eb      	b.n	80013e6 <_printf_i+0x206>
 800140e:	2500      	movs	r5, #0
 8001410:	f104 0619 	add.w	r6, r4, #25
 8001414:	e7f5      	b.n	8001402 <_printf_i+0x222>
 8001416:	bf00      	nop
 8001418:	08001910 	.word	0x08001910
 800141c:	08001921 	.word	0x08001921

08001420 <__sflush_r>:
 8001420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001428:	0716      	lsls	r6, r2, #28
 800142a:	4605      	mov	r5, r0
 800142c:	460c      	mov	r4, r1
 800142e:	d454      	bmi.n	80014da <__sflush_r+0xba>
 8001430:	684b      	ldr	r3, [r1, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	dc02      	bgt.n	800143c <__sflush_r+0x1c>
 8001436:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001438:	2b00      	cmp	r3, #0
 800143a:	dd48      	ble.n	80014ce <__sflush_r+0xae>
 800143c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800143e:	2e00      	cmp	r6, #0
 8001440:	d045      	beq.n	80014ce <__sflush_r+0xae>
 8001442:	2300      	movs	r3, #0
 8001444:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001448:	682f      	ldr	r7, [r5, #0]
 800144a:	6a21      	ldr	r1, [r4, #32]
 800144c:	602b      	str	r3, [r5, #0]
 800144e:	d030      	beq.n	80014b2 <__sflush_r+0x92>
 8001450:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001452:	89a3      	ldrh	r3, [r4, #12]
 8001454:	0759      	lsls	r1, r3, #29
 8001456:	d505      	bpl.n	8001464 <__sflush_r+0x44>
 8001458:	6863      	ldr	r3, [r4, #4]
 800145a:	1ad2      	subs	r2, r2, r3
 800145c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800145e:	b10b      	cbz	r3, 8001464 <__sflush_r+0x44>
 8001460:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001462:	1ad2      	subs	r2, r2, r3
 8001464:	2300      	movs	r3, #0
 8001466:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001468:	6a21      	ldr	r1, [r4, #32]
 800146a:	4628      	mov	r0, r5
 800146c:	47b0      	blx	r6
 800146e:	1c43      	adds	r3, r0, #1
 8001470:	89a3      	ldrh	r3, [r4, #12]
 8001472:	d106      	bne.n	8001482 <__sflush_r+0x62>
 8001474:	6829      	ldr	r1, [r5, #0]
 8001476:	291d      	cmp	r1, #29
 8001478:	d82b      	bhi.n	80014d2 <__sflush_r+0xb2>
 800147a:	4a2a      	ldr	r2, [pc, #168]	@ (8001524 <__sflush_r+0x104>)
 800147c:	410a      	asrs	r2, r1
 800147e:	07d6      	lsls	r6, r2, #31
 8001480:	d427      	bmi.n	80014d2 <__sflush_r+0xb2>
 8001482:	2200      	movs	r2, #0
 8001484:	6062      	str	r2, [r4, #4]
 8001486:	04d9      	lsls	r1, r3, #19
 8001488:	6922      	ldr	r2, [r4, #16]
 800148a:	6022      	str	r2, [r4, #0]
 800148c:	d504      	bpl.n	8001498 <__sflush_r+0x78>
 800148e:	1c42      	adds	r2, r0, #1
 8001490:	d101      	bne.n	8001496 <__sflush_r+0x76>
 8001492:	682b      	ldr	r3, [r5, #0]
 8001494:	b903      	cbnz	r3, 8001498 <__sflush_r+0x78>
 8001496:	6560      	str	r0, [r4, #84]	@ 0x54
 8001498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800149a:	602f      	str	r7, [r5, #0]
 800149c:	b1b9      	cbz	r1, 80014ce <__sflush_r+0xae>
 800149e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80014a2:	4299      	cmp	r1, r3
 80014a4:	d002      	beq.n	80014ac <__sflush_r+0x8c>
 80014a6:	4628      	mov	r0, r5
 80014a8:	f7ff fbf2 	bl	8000c90 <_free_r>
 80014ac:	2300      	movs	r3, #0
 80014ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80014b0:	e00d      	b.n	80014ce <__sflush_r+0xae>
 80014b2:	2301      	movs	r3, #1
 80014b4:	4628      	mov	r0, r5
 80014b6:	47b0      	blx	r6
 80014b8:	4602      	mov	r2, r0
 80014ba:	1c50      	adds	r0, r2, #1
 80014bc:	d1c9      	bne.n	8001452 <__sflush_r+0x32>
 80014be:	682b      	ldr	r3, [r5, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0c6      	beq.n	8001452 <__sflush_r+0x32>
 80014c4:	2b1d      	cmp	r3, #29
 80014c6:	d001      	beq.n	80014cc <__sflush_r+0xac>
 80014c8:	2b16      	cmp	r3, #22
 80014ca:	d11e      	bne.n	800150a <__sflush_r+0xea>
 80014cc:	602f      	str	r7, [r5, #0]
 80014ce:	2000      	movs	r0, #0
 80014d0:	e022      	b.n	8001518 <__sflush_r+0xf8>
 80014d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	e01b      	b.n	8001512 <__sflush_r+0xf2>
 80014da:	690f      	ldr	r7, [r1, #16]
 80014dc:	2f00      	cmp	r7, #0
 80014de:	d0f6      	beq.n	80014ce <__sflush_r+0xae>
 80014e0:	0793      	lsls	r3, r2, #30
 80014e2:	680e      	ldr	r6, [r1, #0]
 80014e4:	bf08      	it	eq
 80014e6:	694b      	ldreq	r3, [r1, #20]
 80014e8:	600f      	str	r7, [r1, #0]
 80014ea:	bf18      	it	ne
 80014ec:	2300      	movne	r3, #0
 80014ee:	eba6 0807 	sub.w	r8, r6, r7
 80014f2:	608b      	str	r3, [r1, #8]
 80014f4:	f1b8 0f00 	cmp.w	r8, #0
 80014f8:	dde9      	ble.n	80014ce <__sflush_r+0xae>
 80014fa:	6a21      	ldr	r1, [r4, #32]
 80014fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80014fe:	4643      	mov	r3, r8
 8001500:	463a      	mov	r2, r7
 8001502:	4628      	mov	r0, r5
 8001504:	47b0      	blx	r6
 8001506:	2800      	cmp	r0, #0
 8001508:	dc08      	bgt.n	800151c <__sflush_r+0xfc>
 800150a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800150e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001512:	81a3      	strh	r3, [r4, #12]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800151c:	4407      	add	r7, r0
 800151e:	eba8 0800 	sub.w	r8, r8, r0
 8001522:	e7e7      	b.n	80014f4 <__sflush_r+0xd4>
 8001524:	dfbffffe 	.word	0xdfbffffe

08001528 <_fflush_r>:
 8001528:	b538      	push	{r3, r4, r5, lr}
 800152a:	690b      	ldr	r3, [r1, #16]
 800152c:	4605      	mov	r5, r0
 800152e:	460c      	mov	r4, r1
 8001530:	b913      	cbnz	r3, 8001538 <_fflush_r+0x10>
 8001532:	2500      	movs	r5, #0
 8001534:	4628      	mov	r0, r5
 8001536:	bd38      	pop	{r3, r4, r5, pc}
 8001538:	b118      	cbz	r0, 8001542 <_fflush_r+0x1a>
 800153a:	6a03      	ldr	r3, [r0, #32]
 800153c:	b90b      	cbnz	r3, 8001542 <_fflush_r+0x1a>
 800153e:	f7ff f9ad 	bl	800089c <__sinit>
 8001542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f3      	beq.n	8001532 <_fflush_r+0xa>
 800154a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800154c:	07d0      	lsls	r0, r2, #31
 800154e:	d404      	bmi.n	800155a <_fflush_r+0x32>
 8001550:	0599      	lsls	r1, r3, #22
 8001552:	d402      	bmi.n	800155a <_fflush_r+0x32>
 8001554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001556:	f7ff fb98 	bl	8000c8a <__retarget_lock_acquire_recursive>
 800155a:	4628      	mov	r0, r5
 800155c:	4621      	mov	r1, r4
 800155e:	f7ff ff5f 	bl	8001420 <__sflush_r>
 8001562:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001564:	07da      	lsls	r2, r3, #31
 8001566:	4605      	mov	r5, r0
 8001568:	d4e4      	bmi.n	8001534 <_fflush_r+0xc>
 800156a:	89a3      	ldrh	r3, [r4, #12]
 800156c:	059b      	lsls	r3, r3, #22
 800156e:	d4e1      	bmi.n	8001534 <_fflush_r+0xc>
 8001570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001572:	f7ff fb8b 	bl	8000c8c <__retarget_lock_release_recursive>
 8001576:	e7dd      	b.n	8001534 <_fflush_r+0xc>

08001578 <__swhatbuf_r>:
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	460c      	mov	r4, r1
 800157c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001580:	2900      	cmp	r1, #0
 8001582:	b096      	sub	sp, #88	@ 0x58
 8001584:	4615      	mov	r5, r2
 8001586:	461e      	mov	r6, r3
 8001588:	da0d      	bge.n	80015a6 <__swhatbuf_r+0x2e>
 800158a:	89a3      	ldrh	r3, [r4, #12]
 800158c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001590:	f04f 0100 	mov.w	r1, #0
 8001594:	bf14      	ite	ne
 8001596:	2340      	movne	r3, #64	@ 0x40
 8001598:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800159c:	2000      	movs	r0, #0
 800159e:	6031      	str	r1, [r6, #0]
 80015a0:	602b      	str	r3, [r5, #0]
 80015a2:	b016      	add	sp, #88	@ 0x58
 80015a4:	bd70      	pop	{r4, r5, r6, pc}
 80015a6:	466a      	mov	r2, sp
 80015a8:	f000 f848 	bl	800163c <_fstat_r>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	dbec      	blt.n	800158a <__swhatbuf_r+0x12>
 80015b0:	9901      	ldr	r1, [sp, #4]
 80015b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80015b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015ba:	4259      	negs	r1, r3
 80015bc:	4159      	adcs	r1, r3
 80015be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015c2:	e7eb      	b.n	800159c <__swhatbuf_r+0x24>

080015c4 <__smakebuf_r>:
 80015c4:	898b      	ldrh	r3, [r1, #12]
 80015c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015c8:	079d      	lsls	r5, r3, #30
 80015ca:	4606      	mov	r6, r0
 80015cc:	460c      	mov	r4, r1
 80015ce:	d507      	bpl.n	80015e0 <__smakebuf_r+0x1c>
 80015d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80015d4:	6023      	str	r3, [r4, #0]
 80015d6:	6123      	str	r3, [r4, #16]
 80015d8:	2301      	movs	r3, #1
 80015da:	6163      	str	r3, [r4, #20]
 80015dc:	b003      	add	sp, #12
 80015de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e0:	ab01      	add	r3, sp, #4
 80015e2:	466a      	mov	r2, sp
 80015e4:	f7ff ffc8 	bl	8001578 <__swhatbuf_r>
 80015e8:	9f00      	ldr	r7, [sp, #0]
 80015ea:	4605      	mov	r5, r0
 80015ec:	4639      	mov	r1, r7
 80015ee:	4630      	mov	r0, r6
 80015f0:	f7ff fbba 	bl	8000d68 <_malloc_r>
 80015f4:	b948      	cbnz	r0, 800160a <__smakebuf_r+0x46>
 80015f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015fa:	059a      	lsls	r2, r3, #22
 80015fc:	d4ee      	bmi.n	80015dc <__smakebuf_r+0x18>
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	81a3      	strh	r3, [r4, #12]
 8001608:	e7e2      	b.n	80015d0 <__smakebuf_r+0xc>
 800160a:	89a3      	ldrh	r3, [r4, #12]
 800160c:	6020      	str	r0, [r4, #0]
 800160e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001612:	81a3      	strh	r3, [r4, #12]
 8001614:	9b01      	ldr	r3, [sp, #4]
 8001616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800161a:	b15b      	cbz	r3, 8001634 <__smakebuf_r+0x70>
 800161c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001620:	4630      	mov	r0, r6
 8001622:	f000 f81d 	bl	8001660 <_isatty_r>
 8001626:	b128      	cbz	r0, 8001634 <__smakebuf_r+0x70>
 8001628:	89a3      	ldrh	r3, [r4, #12]
 800162a:	f023 0303 	bic.w	r3, r3, #3
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	81a3      	strh	r3, [r4, #12]
 8001634:	89a3      	ldrh	r3, [r4, #12]
 8001636:	431d      	orrs	r5, r3
 8001638:	81a5      	strh	r5, [r4, #12]
 800163a:	e7cf      	b.n	80015dc <__smakebuf_r+0x18>

0800163c <_fstat_r>:
 800163c:	b538      	push	{r3, r4, r5, lr}
 800163e:	4d07      	ldr	r5, [pc, #28]	@ (800165c <_fstat_r+0x20>)
 8001640:	2300      	movs	r3, #0
 8001642:	4604      	mov	r4, r0
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	602b      	str	r3, [r5, #0]
 800164a:	f7ff f812 	bl	8000672 <_fstat>
 800164e:	1c43      	adds	r3, r0, #1
 8001650:	d102      	bne.n	8001658 <_fstat_r+0x1c>
 8001652:	682b      	ldr	r3, [r5, #0]
 8001654:	b103      	cbz	r3, 8001658 <_fstat_r+0x1c>
 8001656:	6023      	str	r3, [r4, #0]
 8001658:	bd38      	pop	{r3, r4, r5, pc}
 800165a:	bf00      	nop
 800165c:	200001b8 	.word	0x200001b8

08001660 <_isatty_r>:
 8001660:	b538      	push	{r3, r4, r5, lr}
 8001662:	4d06      	ldr	r5, [pc, #24]	@ (800167c <_isatty_r+0x1c>)
 8001664:	2300      	movs	r3, #0
 8001666:	4604      	mov	r4, r0
 8001668:	4608      	mov	r0, r1
 800166a:	602b      	str	r3, [r5, #0]
 800166c:	f7ff f811 	bl	8000692 <_isatty>
 8001670:	1c43      	adds	r3, r0, #1
 8001672:	d102      	bne.n	800167a <_isatty_r+0x1a>
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	b103      	cbz	r3, 800167a <_isatty_r+0x1a>
 8001678:	6023      	str	r3, [r4, #0]
 800167a:	bd38      	pop	{r3, r4, r5, pc}
 800167c:	200001b8 	.word	0x200001b8

08001680 <_sbrk_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4d06      	ldr	r5, [pc, #24]	@ (800169c <_sbrk_r+0x1c>)
 8001684:	2300      	movs	r3, #0
 8001686:	4604      	mov	r4, r0
 8001688:	4608      	mov	r0, r1
 800168a:	602b      	str	r3, [r5, #0]
 800168c:	f7ff f81a 	bl	80006c4 <_sbrk>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d102      	bne.n	800169a <_sbrk_r+0x1a>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	b103      	cbz	r3, 800169a <_sbrk_r+0x1a>
 8001698:	6023      	str	r3, [r4, #0]
 800169a:	bd38      	pop	{r3, r4, r5, pc}
 800169c:	200001b8 	.word	0x200001b8

080016a0 <_init>:
 80016a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a2:	bf00      	nop
 80016a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016a6:	bc08      	pop	{r3}
 80016a8:	469e      	mov	lr, r3
 80016aa:	4770      	bx	lr

080016ac <_fini>:
 80016ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ae:	bf00      	nop
 80016b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016b2:	bc08      	pop	{r3}
 80016b4:	469e      	mov	lr, r3
 80016b6:	4770      	bx	lr
